/***********************************************************************
 * This file was generated by /root/uhd/host/lib/ic_reg_maps/gen_lmk04816_regs.py on Thu Jun  2 22:24:08 2022
 **********************************************************************/

#ifndef INCLUDED_LMK04816_REGS_HPP
#define INCLUDED_LMK04816_REGS_HPP

#include <uhd/config.hpp>
#include <uhd/exception.hpp>
#include <set>
#include <stdint.h>

class lmk04816_regs_t{
public:
    uint8_t address0;
    uint16_t CLKout0_1_DIV;
    uint8_t CLKout0_1_HS;
    enum RESET_t{
        RESET_NO_RESET = 0,
        RESET_RESET = 1
    };
    RESET_t RESET;
    uint16_t CLKout0_1_DDLY;
    enum CLKout0_ADLY_SEL_t{
        CLKOUT0_ADLY_SEL_D_PD = 0,
        CLKOUT0_ADLY_SEL_D_EV_X = 1,
        CLKOUT0_ADLY_SEL_D_ODD_Y = 2,
        CLKOUT0_ADLY_SEL_D_BOTH = 3
    };
    CLKout0_ADLY_SEL_t CLKout0_ADLY_SEL;
    enum CLKout1_ADLY_SEL_t{
        CLKOUT1_ADLY_SEL_D_PD = 0,
        CLKOUT1_ADLY_SEL_D_EV_X = 1,
        CLKOUT1_ADLY_SEL_D_ODD_Y = 2,
        CLKOUT1_ADLY_SEL_D_BOTH = 3
    };
    CLKout1_ADLY_SEL_t CLKout1_ADLY_SEL;
    uint8_t Required_0;
    enum CLKout0_1_PD_t{
        CLKOUT0_1_PD_POWER_UP = 0,
        CLKOUT0_1_PD_POWER_DOWN = 1
    };
    CLKout0_1_PD_t CLKout0_1_PD;
    uint8_t address1;
    uint16_t CLKout2_3_DIV;
    uint8_t CLKout2_3_HS;
    enum Powerdown_t{
        POWERDOWN_NORMAL = 0,
        POWERDOWN_DISABLED = 1
    };
    Powerdown_t Powerdown;
    uint16_t CLKout2_3_DDLY;
    enum CLKout2_ADLY_SEL_t{
        CLKOUT2_ADLY_SEL_D_PD = 0,
        CLKOUT2_ADLY_SEL_D_EV_X = 1,
        CLKOUT2_ADLY_SEL_D_ODD_Y = 2,
        CLKOUT2_ADLY_SEL_D_BOTH = 3
    };
    CLKout2_ADLY_SEL_t CLKout2_ADLY_SEL;
    enum CLKout3_ADLY_SEL_t{
        CLKOUT3_ADLY_SEL_D_PD = 0,
        CLKOUT3_ADLY_SEL_D_EV_X = 1,
        CLKOUT3_ADLY_SEL_D_ODD_Y = 2,
        CLKOUT3_ADLY_SEL_D_BOTH = 3
    };
    CLKout3_ADLY_SEL_t CLKout3_ADLY_SEL;
    uint8_t Required_1;
    enum CLKout2_3_PD_t{
        CLKOUT2_3_PD_POWER_UP = 0,
        CLKOUT2_3_PD_POWER_DOWN = 1
    };
    CLKout2_3_PD_t CLKout2_3_PD;
    uint8_t address2;
    uint16_t CLKout4_5_DIV;
    uint8_t CLKout4_5_HS;
    uint8_t Required_2_17;
    uint16_t CLKout4_5_DDLY;
    enum CLKout4_ADLY_SEL_t{
        CLKOUT4_ADLY_SEL_D_PD = 0,
        CLKOUT4_ADLY_SEL_D_EV_X = 1,
        CLKOUT4_ADLY_SEL_D_ODD_Y = 2,
        CLKOUT4_ADLY_SEL_D_BOTH = 3
    };
    CLKout4_ADLY_SEL_t CLKout4_ADLY_SEL;
    enum CLKout5_ADLY_SEL_t{
        CLKOUT5_ADLY_SEL_D_PD = 0,
        CLKOUT5_ADLY_SEL_D_EV_X = 1,
        CLKOUT5_ADLY_SEL_D_ODD_Y = 2,
        CLKOUT5_ADLY_SEL_D_BOTH = 3
    };
    CLKout5_ADLY_SEL_t CLKout5_ADLY_SEL;
    uint8_t Required_2_30;
    enum CLKout4_5_PD_t{
        CLKOUT4_5_PD_POWER_UP = 0,
        CLKOUT4_5_PD_POWER_DOWN = 1
    };
    CLKout4_5_PD_t CLKout4_5_PD;
    uint8_t address3;
    uint16_t CLKout6_7_DIV;
    uint8_t CLKout6_7_HS;
    uint8_t Required_3_17;
    uint16_t CLKout6_7_DDLY;
    enum CLKout6_ADLY_SEL_t{
        CLKOUT6_ADLY_SEL_D_PD = 0,
        CLKOUT6_ADLY_SEL_D_EV_X = 1,
        CLKOUT6_ADLY_SEL_D_ODD_Y = 2,
        CLKOUT6_ADLY_SEL_D_BOTH = 3
    };
    CLKout6_ADLY_SEL_t CLKout6_ADLY_SEL;
    enum CLKout7_ADLY_SEL_t{
        CLKOUT7_ADLY_SEL_D_PD = 0,
        CLKOUT7_ADLY_SEL_D_EV_X = 1,
        CLKOUT7_ADLY_SEL_D_ODD_Y = 2,
        CLKOUT7_ADLY_SEL_D_BOTH = 3
    };
    CLKout7_ADLY_SEL_t CLKout7_ADLY_SEL;
    enum CLKout6_7_OSCin_Sel_t{
        CLKOUT6_7_OSCIN_SEL_VCO = 0,
        CLKOUT6_7_OSCIN_SEL_OSCIN = 1
    };
    CLKout6_7_OSCin_Sel_t CLKout6_7_OSCin_Sel;
    enum CLKout6_7_PD_t{
        CLKOUT6_7_PD_POWER_UP = 0,
        CLKOUT6_7_PD_POWER_DOWN = 1
    };
    CLKout6_7_PD_t CLKout6_7_PD;
    uint8_t address4;
    uint16_t CLKout8_9_DIV;
    uint8_t CLKout8_9_HS;
    uint8_t Required_4_17;
    uint16_t CLKout8_9_DDLY;
    enum CLKout8_ADLY_SEL_t{
        CLKOUT8_ADLY_SEL_D_PD = 0,
        CLKOUT8_ADLY_SEL_D_EV_X = 1,
        CLKOUT8_ADLY_SEL_D_ODD_Y = 2,
        CLKOUT8_ADLY_SEL_D_BOTH = 3
    };
    CLKout8_ADLY_SEL_t CLKout8_ADLY_SEL;
    enum CLKout9_ADLY_SEL_t{
        CLKOUT9_ADLY_SEL_D_PD = 0,
        CLKOUT9_ADLY_SEL_D_EV_X = 1,
        CLKOUT9_ADLY_SEL_D_ODD_Y = 2,
        CLKOUT9_ADLY_SEL_D_BOTH = 3
    };
    CLKout9_ADLY_SEL_t CLKout9_ADLY_SEL;
    enum CLKout8_9_OSCin_Sel_t{
        CLKOUT8_9_OSCIN_SEL_VCO = 0,
        CLKOUT8_9_OSCIN_SEL_OSCIN = 1
    };
    CLKout8_9_OSCin_Sel_t CLKout8_9_OSCin_Sel;
    enum CLKout8_9_PD_t{
        CLKOUT8_9_PD_POWER_UP = 0,
        CLKOUT8_9_PD_POWER_DOWN = 1
    };
    CLKout8_9_PD_t CLKout8_9_PD;
    uint8_t address5;
    uint16_t CLKout10_11_DIV;
    uint8_t CLKout10_11_HS;
    uint8_t Required_5_17;
    uint16_t CLKout10_11_DDLY;
    enum CLKout10_ADLY_SEL_t{
        CLKOUT10_ADLY_SEL_D_PD = 0,
        CLKOUT10_ADLY_SEL_D_EV_X = 1,
        CLKOUT10_ADLY_SEL_D_ODD_Y = 2,
        CLKOUT10_ADLY_SEL_D_BOTH = 3
    };
    CLKout10_ADLY_SEL_t CLKout10_ADLY_SEL;
    enum CLKout11_ADLY_SEL_t{
        CLKOUT11_ADLY_SEL_D_PD = 0,
        CLKOUT11_ADLY_SEL_D_EV_X = 1,
        CLKOUT11_ADLY_SEL_D_ODD_Y = 2,
        CLKOUT11_ADLY_SEL_D_BOTH = 3
    };
    CLKout11_ADLY_SEL_t CLKout11_ADLY_SEL;
    uint8_t Required_5_30;
    enum CLKout10_11_PD_t{
        CLKOUT10_11_PD_NORMAL = 0,
        CLKOUT10_11_PD_POWER_DOWN = 1
    };
    CLKout10_11_PD_t CLKout10_11_PD;
    uint8_t address6;
    uint8_t CLKout0_1_ADLY;
    uint8_t Required_6_10;
    uint8_t CLKout2_3_ADLY;
    enum CLKout0_TYPE_t{
        CLKOUT0_TYPE_P_DOWN = 0,
        CLKOUT0_TYPE_LVDS = 1,
        CLKOUT0_TYPE_LVPECL_700MVPP = 2,
        CLKOUT0_TYPE_LVPECL_1200MVPP = 3,
        CLKOUT0_TYPE_LVPECL_1600MVPP = 4,
        CLKOUT0_TYPE_LVPECL_200MVPP = 5,
        CLKOUT0_TYPE_LVCMOS = 6,
        CLKOUT0_TYPE_LVCMOS_IN = 7,
        CLKOUT0_TYPE_LVCMOS_NN = 8,
        CLKOUT0_TYPE_LVCMOS_II = 9,
        CLKOUT0_TYPE_LVCMOS_LN = 10,
        CLKOUT0_TYPE_LVCMOS_LI = 11,
        CLKOUT0_TYPE_LVCMOS_NL = 12,
        CLKOUT0_TYPE_LVCMOS_IL = 13,
        CLKOUT0_TYPE_LVCMOS_LL = 1
    };
    CLKout0_TYPE_t CLKout0_TYPE;
    enum CLKout1_TYPE_t{
        CLKOUT1_TYPE_P_DOWN = 0,
        CLKOUT1_TYPE_LVDS = 1,
        CLKOUT1_TYPE_LVPECL_700MVPP = 2,
        CLKOUT1_TYPE_LVPECL_1200MVPP = 3,
        CLKOUT1_TYPE_LVPECL_1600MVPP = 4,
        CLKOUT1_TYPE_LVPECL_200MVPP = 5,
        CLKOUT1_TYPE_LVCMOS = 6,
        CLKOUT1_TYPE_LVCMOS_IN = 7,
        CLKOUT1_TYPE_LVCMOS_NN = 8,
        CLKOUT1_TYPE_LVCMOS_II = 9,
        CLKOUT1_TYPE_LVCMOS_LN = 10,
        CLKOUT1_TYPE_LVCMOS_LI = 11,
        CLKOUT1_TYPE_LVCMOS_NL = 12,
        CLKOUT1_TYPE_LVCMOS_IL = 13,
        CLKOUT1_TYPE_LVCMOS_LL = 1
    };
    CLKout1_TYPE_t CLKout1_TYPE;
    enum CLKout2_TYPE_t{
        CLKOUT2_TYPE_P_DOWN = 0,
        CLKOUT2_TYPE_LVDS = 1,
        CLKOUT2_TYPE_LVPECL_700MVPP = 2,
        CLKOUT2_TYPE_LVPECL_1200MVPP = 3,
        CLKOUT2_TYPE_LVPECL_1600MVPP = 4,
        CLKOUT2_TYPE_LVPECL_200MVPP = 5,
        CLKOUT2_TYPE_LVCMOS = 6,
        CLKOUT2_TYPE_LVCMOS_IN = 7,
        CLKOUT2_TYPE_LVCMOS_NN = 8,
        CLKOUT2_TYPE_LVCMOS_II = 9,
        CLKOUT2_TYPE_LVCMOS_LN = 10,
        CLKOUT2_TYPE_LVCMOS_LI = 11,
        CLKOUT2_TYPE_LVCMOS_NL = 12,
        CLKOUT2_TYPE_LVCMOS_IL = 13,
        CLKOUT2_TYPE_LVCMOS_LL = 1
    };
    CLKout2_TYPE_t CLKout2_TYPE;
    enum CLKout3_TYPE_t{
        CLKOUT3_TYPE_P_DOWN = 0,
        CLKOUT3_TYPE_LVDS = 1,
        CLKOUT3_TYPE_LVPECL_700MVPP = 2,
        CLKOUT3_TYPE_LVPECL_1200MVPP = 3,
        CLKOUT3_TYPE_LVPECL_1600MVPP = 4,
        CLKOUT3_TYPE_LVPECL_200MVPP = 5,
        CLKOUT3_TYPE_LVCMOS = 6,
        CLKOUT3_TYPE_LVCMOS_IN = 7,
        CLKOUT3_TYPE_LVCMOS_NN = 8,
        CLKOUT3_TYPE_LVCMOS_II = 9,
        CLKOUT3_TYPE_LVCMOS_LN = 10,
        CLKOUT3_TYPE_LVCMOS_LI = 11,
        CLKOUT3_TYPE_LVCMOS_NL = 12,
        CLKOUT3_TYPE_LVCMOS_IL = 13,
        CLKOUT3_TYPE_LVCMOS_LL = 1
    };
    CLKout3_TYPE_t CLKout3_TYPE;
    uint8_t address7;
    uint8_t CLKout4_5_ADLY;
    uint8_t Required_7_10;
    uint8_t CLKout6_7_ADLY;
    enum CLKout4_TYPE_t{
        CLKOUT4_TYPE_P_DOWN = 0,
        CLKOUT4_TYPE_LVDS = 1,
        CLKOUT4_TYPE_LVPECL_700MVPP = 2,
        CLKOUT4_TYPE_LVPECL_1200MVPP = 3,
        CLKOUT4_TYPE_LVPECL_1600MVPP = 4,
        CLKOUT4_TYPE_LVPECL_200MVPP = 5,
        CLKOUT4_TYPE_LVCMOS = 6,
        CLKOUT4_TYPE_LVCMOS_IN = 7,
        CLKOUT4_TYPE_LVCMOS_NN = 8,
        CLKOUT4_TYPE_LVCMOS_II = 9,
        CLKOUT4_TYPE_LVCMOS_LN = 10,
        CLKOUT4_TYPE_LVCMOS_LI = 11,
        CLKOUT4_TYPE_LVCMOS_NL = 12,
        CLKOUT4_TYPE_LVCMOS_IL = 13,
        CLKOUT4_TYPE_LVCMOS_LL = 1
    };
    CLKout4_TYPE_t CLKout4_TYPE;
    enum CLKout5_TYPE_t{
        CLKOUT5_TYPE_P_DOWN = 0,
        CLKOUT5_TYPE_LVDS = 1,
        CLKOUT5_TYPE_LVPECL_700MVPP = 2,
        CLKOUT5_TYPE_LVPECL_1200MVPP = 3,
        CLKOUT5_TYPE_LVPECL_1600MVPP = 4,
        CLKOUT5_TYPE_LVPECL_200MVPP = 5,
        CLKOUT5_TYPE_LVCMOS = 6,
        CLKOUT5_TYPE_LVCMOS_IN = 7,
        CLKOUT5_TYPE_LVCMOS_NN = 8,
        CLKOUT5_TYPE_LVCMOS_II = 9,
        CLKOUT5_TYPE_LVCMOS_LN = 10,
        CLKOUT5_TYPE_LVCMOS_LI = 11,
        CLKOUT5_TYPE_LVCMOS_NL = 12,
        CLKOUT5_TYPE_LVCMOS_IL = 13,
        CLKOUT5_TYPE_LVCMOS_LL = 1
    };
    CLKout5_TYPE_t CLKout5_TYPE;
    enum CLKout6_TYPE_t{
        CLKOUT6_TYPE_P_DOWN = 0,
        CLKOUT6_TYPE_LVDS = 1,
        CLKOUT6_TYPE_LVPECL_700MVPP = 2,
        CLKOUT6_TYPE_LVPECL_1200MVPP = 3,
        CLKOUT6_TYPE_LVPECL_1600MVPP = 4,
        CLKOUT6_TYPE_LVPECL_200MVPP = 5,
        CLKOUT6_TYPE_LVCMOS = 6,
        CLKOUT6_TYPE_LVCMOS_IN = 7,
        CLKOUT6_TYPE_LVCMOS_NN = 8,
        CLKOUT6_TYPE_LVCMOS_II = 9,
        CLKOUT6_TYPE_LVCMOS_LN = 10,
        CLKOUT6_TYPE_LVCMOS_LI = 11,
        CLKOUT6_TYPE_LVCMOS_NL = 12,
        CLKOUT6_TYPE_LVCMOS_IL = 13,
        CLKOUT6_TYPE_LVCMOS_LL = 1
    };
    CLKout6_TYPE_t CLKout6_TYPE;
    enum CLKout7_TYPE_t{
        CLKOUT7_TYPE_P_DOWN = 0,
        CLKOUT7_TYPE_LVDS = 1,
        CLKOUT7_TYPE_LVPECL_700MVPP = 2,
        CLKOUT7_TYPE_LVPECL_1200MVPP = 3,
        CLKOUT7_TYPE_LVPECL_1600MVPP = 4,
        CLKOUT7_TYPE_LVPECL_200MVPP = 5,
        CLKOUT7_TYPE_LVCMOS = 6,
        CLKOUT7_TYPE_LVCMOS_IN = 7,
        CLKOUT7_TYPE_LVCMOS_NN = 8,
        CLKOUT7_TYPE_LVCMOS_II = 9,
        CLKOUT7_TYPE_LVCMOS_LN = 10,
        CLKOUT7_TYPE_LVCMOS_LI = 11,
        CLKOUT7_TYPE_LVCMOS_NL = 12,
        CLKOUT7_TYPE_LVCMOS_IL = 13,
        CLKOUT7_TYPE_LVCMOS_LL = 1
    };
    CLKout7_TYPE_t CLKout7_TYPE;
    uint8_t address8;
    uint8_t CLKout8_9_ADLY;
    uint8_t Required_8_10;
    enum CLKout10_11_ADLY_t{
        CLKOUT10_11_ADLY_P_DOWN = 0,
        CLKOUT10_11_ADLY_LVDS = 1,
        CLKOUT10_11_ADLY_LVPECL_700MVPP = 2,
        CLKOUT10_11_ADLY_LVPECL_1200MVPP = 3,
        CLKOUT10_11_ADLY_LVPECL_1600MVPP = 4,
        CLKOUT10_11_ADLY_LVPECL_200MVPP = 5,
        CLKOUT10_11_ADLY_LVCMOS = 6,
        CLKOUT10_11_ADLY_LVCMOS_IN = 7,
        CLKOUT10_11_ADLY_LVCMOS_NN = 8,
        CLKOUT10_11_ADLY_LVCMOS_II = 9,
        CLKOUT10_11_ADLY_LVCMOS_LN = 10,
        CLKOUT10_11_ADLY_LVCMOS_LI = 11,
        CLKOUT10_11_ADLY_LVCMOS_NL = 12,
        CLKOUT10_11_ADLY_LVCMOS_IL = 13,
        CLKOUT10_11_ADLY_LVCMOS_LL = 1
    };
    CLKout10_11_ADLY_t CLKout10_11_ADLY;
    enum CLKout8_TYPE_t{
        CLKOUT8_TYPE_P_DOWN = 0,
        CLKOUT8_TYPE_LVDS = 1,
        CLKOUT8_TYPE_LVPECL_700MVPP = 2,
        CLKOUT8_TYPE_LVPECL_1200MVPP = 3,
        CLKOUT8_TYPE_LVPECL_1600MVPP = 4,
        CLKOUT8_TYPE_LVPECL_200MVPP = 5,
        CLKOUT8_TYPE_LVCMOS = 6,
        CLKOUT8_TYPE_LVCMOS_IN = 7,
        CLKOUT8_TYPE_LVCMOS_NN = 8,
        CLKOUT8_TYPE_LVCMOS_II = 9,
        CLKOUT8_TYPE_LVCMOS_LN = 10,
        CLKOUT8_TYPE_LVCMOS_LI = 11,
        CLKOUT8_TYPE_LVCMOS_NL = 12,
        CLKOUT8_TYPE_LVCMOS_IL = 13,
        CLKOUT8_TYPE_LVCMOS_LL = 1
    };
    CLKout8_TYPE_t CLKout8_TYPE;
    enum CLKout9_TYPE_t{
        CLKOUT9_TYPE_P_DOWN = 0,
        CLKOUT9_TYPE_LVDS = 1,
        CLKOUT9_TYPE_LVPECL_700MVPP = 2,
        CLKOUT9_TYPE_LVPECL_1200MVPP = 3,
        CLKOUT9_TYPE_LVPECL_1600MVPP = 4,
        CLKOUT9_TYPE_LVPECL_200MVPP = 5,
        CLKOUT9_TYPE_LVCMOS = 6,
        CLKOUT9_TYPE_LVCMOS_IN = 7,
        CLKOUT9_TYPE_LVCMOS_NN = 8,
        CLKOUT9_TYPE_LVCMOS_II = 9,
        CLKOUT9_TYPE_LVCMOS_LN = 10,
        CLKOUT9_TYPE_LVCMOS_LI = 11,
        CLKOUT9_TYPE_LVCMOS_NL = 12,
        CLKOUT9_TYPE_LVCMOS_IL = 13,
        CLKOUT9_TYPE_LVCMOS_LL = 1
    };
    CLKout9_TYPE_t CLKout9_TYPE;
    enum CLKout10_TYPE_t{
        CLKOUT10_TYPE_P_DOWN = 0,
        CLKOUT10_TYPE_LVDS = 1,
        CLKOUT10_TYPE_LVPECL_700MVPP = 2,
        CLKOUT10_TYPE_LVPECL_1200MVPP = 3,
        CLKOUT10_TYPE_LVPECL_1600MVPP = 4,
        CLKOUT10_TYPE_LVPECL_200MVPP = 5,
        CLKOUT10_TYPE_LVCMOS = 6,
        CLKOUT10_TYPE_LVCMOS_IN = 7,
        CLKOUT10_TYPE_LVCMOS_NN = 8,
        CLKOUT10_TYPE_LVCMOS_II = 9,
        CLKOUT10_TYPE_LVCMOS_LN = 10,
        CLKOUT10_TYPE_LVCMOS_LI = 11,
        CLKOUT10_TYPE_LVCMOS_NL = 12,
        CLKOUT10_TYPE_LVCMOS_IL = 13,
        CLKOUT10_TYPE_LVCMOS_LL = 1
    };
    CLKout10_TYPE_t CLKout10_TYPE;
    enum CLKout11_TYPE_t{
        CLKOUT11_TYPE_P_DOWN = 0,
        CLKOUT11_TYPE_LVDS = 1,
        CLKOUT11_TYPE_LVPECL_700MVPP = 2,
        CLKOUT11_TYPE_LVPECL_1200MVPP = 3,
        CLKOUT11_TYPE_LVPECL_1600MVPP = 4,
        CLKOUT11_TYPE_LVPECL_200MVPP = 5,
        CLKOUT11_TYPE_LVCMOS = 6,
        CLKOUT11_TYPE_LVCMOS_IN = 7,
        CLKOUT11_TYPE_LVCMOS_NN = 8,
        CLKOUT11_TYPE_LVCMOS_II = 9,
        CLKOUT11_TYPE_LVCMOS_LN = 10,
        CLKOUT11_TYPE_LVCMOS_LI = 11,
        CLKOUT11_TYPE_LVCMOS_NL = 12,
        CLKOUT11_TYPE_LVCMOS_IL = 13,
        CLKOUT11_TYPE_LVCMOS_LL = 1
    };
    CLKout11_TYPE_t CLKout11_TYPE;
    uint8_t address9;
    uint8_t Required_9_5;
    uint8_t Required_9_6;
    uint8_t Required_9_7;
    uint8_t Required_9_8;
    uint8_t Required_9_9;
    uint8_t Required_9_10;
    uint8_t Required_9_11;
    uint8_t Required_9_12;
    uint8_t Required_9_13;
    uint8_t Required_9_14;
    uint8_t Required_9_15;
    uint8_t Required_9_16;
    uint8_t Required_9_17;
    uint8_t Required_9_18;
    uint8_t Required_9_19;
    uint8_t Required_9_20;
    uint8_t Required_9_21;
    uint8_t Required_9_22;
    uint8_t Required_9_23;
    uint8_t Required_9_24;
    uint8_t Required_9_25;
    uint8_t Required_9_26;
    uint8_t Required_9_27;
    uint8_t Required_9_28;
    uint8_t Required_9_29;
    uint8_t Required_9_30;
    uint8_t Required_9_31;
    uint8_t address10;
    uint8_t FEEDBACK_MUX;
    uint8_t VCO_DIV;
    enum EN_FEEDBACK_MUX_t{
        EN_FEEDBACK_MUX_POWERED_DOWN = 0,
        EN_FEEDBACK_MUX_ENABLED = 1
    };
    EN_FEEDBACK_MUX_t EN_FEEDBACK_MUX;
    enum VCO_MUX_t{
        VCO_MUX_JUST_VCO = 0,
        VCO_MUX_VCO_DIVIDER = 1
    };
    VCO_MUX_t VCO_MUX;
    uint8_t Required_10_13;
    uint8_t Required_10_14;
    uint8_t Required_10_15;
    uint8_t OSCout_DIV;
    enum PD_OSCin_t{
        PD_OSCIN_NORMAL = 0,
        PD_OSCIN_POWER_DOWN = 1
    };
    PD_OSCin_t PD_OSCin;
    enum OSCout10_MUX_t{
        OSCOUT10_MUX_BYPASS_DIV = 0,
        OSCOUT10_MUX_DIVIDED = 1
    };
    OSCout10_MUX_t OSCout10_MUX;
    uint8_t Required_10_21;
    enum EN_OSCout0_t{
        EN_OSCOUT0_DISABLED = 0,
        EN_OSCOUT0_ENABLED = 1
    };
    EN_OSCout0_t EN_OSCout0;
    uint8_t Required_10_23;
    uint8_t OSCout0_TYPE;
    uint8_t Required_10_28;
    uint8_t Required_10_range;
    uint8_t address11;
    enum EN_PLL2_XTAL_t{
        EN_PLL2_XTAL_OSC_DISABLED = 0,
        EN_PLL2_XTAL_OSC_ENABLED = 1
    };
    EN_PLL2_XTAL_t EN_PLL2_XTAL;
    uint8_t Required_11;
    enum SYNC_TYPE_t{
        SYNC_TYPE_INPUT = 0,
        SYNC_TYPE_IN_PULL_UP = 1,
        SYNC_TYPE_IN_PULL_DOWN = 2,
        SYNC_TYPE_OUT_PUSH_PULL = 3,
        SYNC_TYPE_OUT_INVERTED = 4,
        SYNC_TYPE_OUT_OPEN_SOURCES = 5,
        SYNC_TYPE_OUT_OPEN_DRAINS = 6
    };
    SYNC_TYPE_t SYNC_TYPE;
    enum SYNC_EN_AUTO_t{
        SYNC_EN_AUTO_MAN_SYNC = 0,
        SYNC_EN_AUTO_SYNC_INT_GEN = 1
    };
    SYNC_EN_AUTO_t SYNC_EN_AUTO;
    enum SYNC_POL_INV_t{
        SYNC_POL_INV_SYNC_HIGH = 0,
        SYNC_POL_INV_SYNC_LOW = 1
    };
    SYNC_POL_INV_t SYNC_POL_INV;
    enum SYNC_QUAL_t{
        SYNC_QUAL_NOT_QUAL = 0,
        SYNC_QUAL_FB_MUX = 1
    };
    SYNC_QUAL_t SYNC_QUAL;
    enum SYNC_CLKin2_MUX_t{
        SYNC_CLKIN2_MUX_LOG_LOW = 0,
        SYNC_CLKIN2_MUX_CLKIN2_LOS = 1,
        SYNC_CLKIN2_MUX_CLKIN2_SELECTED = 2,
        SYNC_CLKIN2_MUX_UWIRE_RB = 3
    };
    SYNC_CLKin2_MUX_t SYNC_CLKin2_MUX;
    enum NO_SYNC_CLKout0_1_t{
        NO_SYNC_CLKOUT0_1_CLOCK_XY_SYNC = 0,
        NO_SYNC_CLKOUT0_1_CLOCK_XY_NOSYNC = 1
    };
    NO_SYNC_CLKout0_1_t NO_SYNC_CLKout0_1;
    enum NO_SYNC_CLKout2_3_t{
        NO_SYNC_CLKOUT2_3_CLOCK_XY_SYNC = 0,
        NO_SYNC_CLKOUT2_3_CLOCK_XY_NOSYNC = 1
    };
    NO_SYNC_CLKout2_3_t NO_SYNC_CLKout2_3;
    enum NO_SYNC_CLKout4_5_t{
        NO_SYNC_CLKOUT4_5_CLOCK_XY_SYNC = 0,
        NO_SYNC_CLKOUT4_5_CLOCK_XY_NOSYNC = 1
    };
    NO_SYNC_CLKout4_5_t NO_SYNC_CLKout4_5;
    enum NO_SYNC_CLKout6_7_t{
        NO_SYNC_CLKOUT6_7_CLOCK_XY_SYNC = 0,
        NO_SYNC_CLKOUT6_7_CLOCK_XY_NOSYNC = 1
    };
    NO_SYNC_CLKout6_7_t NO_SYNC_CLKout6_7;
    enum NO_SYNC_CLKout8_9_t{
        NO_SYNC_CLKOUT8_9_CLOCK_XY_SYNC = 0,
        NO_SYNC_CLKOUT8_9_CLOCK_XY_NOSYNC = 1
    };
    NO_SYNC_CLKout8_9_t NO_SYNC_CLKout8_9;
    enum NO_SYNC_CLKout10_11_t{
        NO_SYNC_CLKOUT10_11_CLOCK_XY_SYNC = 0,
        NO_SYNC_CLKOUT10_11_CLOCK_XY_NOSYNC = 1
    };
    NO_SYNC_CLKout10_11_t NO_SYNC_CLKout10_11;
    enum EN_SYNC_t{
        EN_SYNC_DISABLE = 0,
        EN_SYNC_ENABLE = 1
    };
    EN_SYNC_t EN_SYNC;
    enum MODE_t{
        MODE_DUAL_INT = 0,
        MODE_DUAL_INT_ZER_DELAY = 2,
        MODE_DUAL_EXT = 3,
        MODE_DUAL_EXT_ZER_DELAY = 5,
        MODE_PLL_TWO_INT = 6,
        MODE_PLL_TWO_INT_ZER_DELAY = 8,
        MODE_PLL_TWO_EXT = 11,
        MODE_CLOCK_DIST = 16
    };
    MODE_t MODE;
    uint8_t address12;
    enum HOLDOVER_MODE_t{
        HOLDOVER_MODE_DISABLED = 1,
        HOLDOVER_MODE_ENABLED = 2
    };
    HOLDOVER_MODE_t HOLDOVER_MODE;
    enum EN_TRACK_t{
        EN_TRACK_DISABLED = 0,
        EN_TRACK_ENABLED = 1
    };
    EN_TRACK_t EN_TRACK;
    uint16_t Required_12_range917;
    uint8_t Required_12_range1819;
    uint8_t Required_12_20;
    uint8_t Required_LE_12;
    enum SYNC_PLL1_DLD_t{
        SYNC_PLL1_DLD_SYNC_MODE_NOFORCE = 0,
        SYNC_PLL1_DLD_SYNC_MODE_FORCE = 1
    };
    SYNC_PLL1_DLD_t SYNC_PLL1_DLD;
    enum SYNC_PLL2_DLD_t{
        SYNC_PLL2_DLD_SYNC_MODE_NOFORCE = 0,
        SYNC_PLL2_DLD_SYNC_MODE_FORCE = 1
    };
    SYNC_PLL2_DLD_t SYNC_PLL2_DLD;
    enum LD_TYPE_t{
        LD_TYPE_OUT_PUSH_PULL = 3,
        LD_TYPE_OUT_INVERTED = 4,
        LD_TYPE_OUT_OPEN_SOURCES = 5,
        LD_TYPE_OUT_OPEN_DRAINS = 6
    };
    LD_TYPE_t LD_TYPE;
    enum LD_MUX_t{
        LD_MUX_LOG_LOW = 0,
        LD_MUX_PLL1_DLD = 1,
        LD_MUX_PLL2_DLD = 2,
        LD_MUX_BOTH = 3,
        LD_MUX_HOLDOVER = 4,
        LD_MUX_LOCKED_DAC = 5,
        LD_MUX_UWIRE_RB = 7,
        LD_MUX_RAIL = 8,
        LD_MUX_LOW = 9,
        LD_MUX_HIGH = 10,
        LD_MUX_PLL1_N = 11,
        LD_MUX_PLL1_NHALF = 12,
        LD_MUX_PLL2_N = 13,
        LD_MUX_PLL2_NHALF = 14,
        LD_MUX_PLL1_R = 15,
        LD_MUX_PLL1_RHALF = 16,
        LD_MUX_PLL2_R = 17,
        LD_MUX_PLL2_RHALF = 18
    };
    LD_MUX_t LD_MUX;
    uint8_t address13;
    enum EN_CLKin0_t{
        EN_CLKIN0_NO_VALID_USE = 0,
        EN_CLKIN0_VALID_USE = 1
    };
    EN_CLKin0_t EN_CLKin0;
    enum EN_CLKin1_t{
        EN_CLKIN1_NO_VALID_USE = 0,
        EN_CLKIN1_VALID_USE = 1
    };
    EN_CLKin1_t EN_CLKin1;
    enum EN_CLKin2_t{
        EN_CLKIN2_NO_VALID_USE = 0,
        EN_CLKIN2_VALID_USE = 1
    };
    EN_CLKin2_t EN_CLKin2;
    enum CLKin_Sel_INV_t{
        CLKIN_SEL_INV_ACTIVE_HIGH = 0,
        CLKIN_SEL_INV_ACTIVE_LOW = 1
    };
    CLKin_Sel_INV_t CLKin_Sel_INV;
    enum CLKin_Select_MODE_t{
        CLKIN_SELECT_MODE_CLKIN0_MAN = 0,
        CLKIN_SELECT_MODE_CLKIN1_MAN = 1,
        CLKIN_SELECT_MODE_CLKIN2_MAN = 2,
        CLKIN_SELECT_MODE_PIN_SEL_MODE = 3,
        CLKIN_SELECT_MODE_AUTO_MODE = 4,
        CLKIN_SELECT_MODE_AUTO_MODE_W_NEXT_BLOCK_SEL = 6
    };
    CLKin_Select_MODE_t CLKin_Select_MODE;
    enum Status_CLKin0_MUX_t{
        STATUS_CLKIN0_MUX_LOG_LOW = 0,
        STATUS_CLKIN0_MUX_CLKIN0_LOS = 1,
        STATUS_CLKIN0_MUX_CLKIN0_SELECTED = 2,
        STATUS_CLKIN0_MUX_DAC_LOCK = 3,
        STATUS_CLKIN0_MUX_DAC_LOW = 4,
        STATUS_CLKIN0_MUX_DAC_HIGH = 5,
        STATUS_CLKIN0_MUX_UWIRE_RB = 6
    };
    Status_CLKin0_MUX_t Status_CLKin0_MUX;
    enum DISABLE_DLD1_DET_t{
        DISABLE_DLD1_DET_PLL1_DLD_CAUSE_EVENT = 0,
        DISABLE_DLD1_DET_PLL1_DLD_NOT_CAUSE = 1
    };
    DISABLE_DLD1_DET_t DISABLE_DLD1_DET;
    enum Status_CLKin0_TYPE_t{
        STATUS_CLKIN0_TYPE_INPUT = 0,
        STATUS_CLKIN0_TYPE_IN_PULL_UP = 1,
        STATUS_CLKIN0_TYPE_IN_PULL_DOWN = 2,
        STATUS_CLKIN0_TYPE_OUT_PUSH_PULL = 3,
        STATUS_CLKIN0_TYPE_OUT_INVERTED = 4,
        STATUS_CLKIN0_TYPE_OUT_OPEN_SOURCES = 5,
        STATUS_CLKIN0_TYPE_OUT_OPEN_DRAINS = 6
    };
    Status_CLKin0_TYPE_t Status_CLKin0_TYPE;
    uint8_t Required_13_19;
    enum Status_CLKin1_MUX_t{
        STATUS_CLKIN1_MUX_LOG_LOW = 0,
        STATUS_CLKIN1_MUX_CLKIN1_LOS = 1,
        STATUS_CLKIN1_MUX_CLKIN1_SELECTED = 2,
        STATUS_CLKIN1_MUX_DAC_LOCK = 3,
        STATUS_CLKIN1_MUX_DAC_LOW = 4,
        STATUS_CLKIN1_MUX_DAC_HIGH = 5,
        STATUS_CLKIN1_MUX_UWIRE_RB = 6
    };
    Status_CLKin1_MUX_t Status_CLKin1_MUX;
    uint8_t Required_19_23;
    enum HOLDOVER_TYPE_t{
        HOLDOVER_TYPE_OUT_PUSH_PULL = 3,
        HOLDOVER_TYPE_OUT_INVERTED = 4,
        HOLDOVER_TYPE_OUT_OPEN_SOURCES = 5,
        HOLDOVER_TYPE_OUT_OPEN_DRAINS = 6
    };
    HOLDOVER_TYPE_t HOLDOVER_TYPE;
    enum HOLDOVER_MUX_t{
        HOLDOVER_MUX_LOG_LOW = 0,
        HOLDOVER_MUX_PLL1_DLD = 1,
        HOLDOVER_MUX_PLL2_DLD = 2,
        HOLDOVER_MUX_BOTH = 3,
        HOLDOVER_MUX_HOLDOVER = 4,
        HOLDOVER_MUX_LOCKED_DAC = 5,
        HOLDOVER_MUX_UWIRE_RB = 7,
        HOLDOVER_MUX_RAIL = 8,
        HOLDOVER_MUX_LOW = 9,
        HOLDOVER_MUX_HIGH = 10,
        HOLDOVER_MUX_PLL1_N = 11,
        HOLDOVER_MUX_PLL1_NHALF = 12,
        HOLDOVER_MUX_PLL2_N = 13,
        HOLDOVER_MUX_PLL2_NHALF = 14,
        HOLDOVER_MUX_PLL1_R = 15,
        HOLDOVER_MUX_PLL1_RHALF = 16,
        HOLDOVER_MUX_PLL2_R = 17,
        HOLDOVER_MUX_PLL2_RHALF = 18
    };
    HOLDOVER_MUX_t HOLDOVER_MUX;
    uint8_t address14;
    enum EN_VTUNE_RAIL_DET_t{
        EN_VTUNE_RAIL_DET_DISABLED = 0,
        EN_VTUNE_RAIL_DET_ENABLED = 1
    };
    EN_VTUNE_RAIL_DET_t EN_VTUNE_RAIL_DET;
    uint8_t DAC_LOW_TRIP;
    uint8_t Required_14_1213;
    uint8_t DAC_HIGH_TRIP;
    enum CLKin0_BUF_TYPE_t{
        CLKIN0_BUF_TYPE_BIPOLAR = 0,
        CLKIN0_BUF_TYPE_CMOS = 1
    };
    CLKin0_BUF_TYPE_t CLKin0_BUF_TYPE;
    enum CLKin1_BUF_TYPE_t{
        CLKIN1_BUF_TYPE_BIPOLAR = 0,
        CLKIN1_BUF_TYPE_CMOS = 1
    };
    CLKin1_BUF_TYPE_t CLKin1_BUF_TYPE;
    enum CLKin2_BUF_TYPE_t{
        CLKIN2_BUF_TYPE_BIPOLAR = 0,
        CLKIN2_BUF_TYPE_CMOS = 1
    };
    CLKin2_BUF_TYPE_t CLKin2_BUF_TYPE;
    uint8_t Required_14_23;
    enum Status_CLKin1_TYPE_t{
        STATUS_CLKIN1_TYPE_INPUT = 0,
        STATUS_CLKIN1_TYPE_IN_PULL_UP = 1,
        STATUS_CLKIN1_TYPE_IN_PULL_DOWN = 2,
        STATUS_CLKIN1_TYPE_OUT_PUSH_PULL = 3,
        STATUS_CLKIN1_TYPE_OUT_INVERTED = 4,
        STATUS_CLKIN1_TYPE_OUT_OPEN_SOURCES = 5,
        STATUS_CLKIN1_TYPE_OUT_OPEN_DRAINS = 6
    };
    Status_CLKin1_TYPE_t Status_CLKin1_TYPE;
    uint8_t Required_14_27;
    enum EN_LOS_t{
        EN_LOS_DISABLE_TIMEOUT = 0,
        EN_LOS_ENABLE_TIMEOUT = 1
    };
    EN_LOS_t EN_LOS;
    uint8_t Required_14_29;
    enum LOS_TIMEOUT_t{
        LOS_TIMEOUT_1200NS_AT_4P2KHZ = 0,
        LOS_TIMEOUT_206NS_AT_2P5MHZ = 1,
        LOS_TIMEOUT_52P9AT10MHZ = 2,
        LOS_TIMEOUT_23P7_AT_22MHZ = 3
    };
    LOS_TIMEOUT_t LOS_TIMEOUT;
    uint8_t address15;
    enum FORCE_HOLDOVER_t{
        FORCE_HOLDOVER_DISABLED = 0,
        FORCE_HOLDOVER_ENABLED = 1
    };
    FORCE_HOLDOVER_t FORCE_HOLDOVER;
    uint16_t HOLDOVER_DLD_CNT;
    enum EN_MAN_DAC_t{
        EN_MAN_DAC_DISABLED = 0,
        EN_MAN_DAC_ENABLED = 1
    };
    EN_MAN_DAC_t EN_MAN_DAC;
    uint8_t Required_15;
    uint16_t MAN_DAC;
    uint8_t address16;
    uint8_t Required_16_5;
    uint8_t Required_16_6;
    uint8_t Required_16_7;
    uint8_t Required_16_8;
    uint8_t Required_16_9;
    uint8_t Required_16_10;
    uint8_t Required_16_11;
    uint8_t Required_16_12;
    uint8_t Required_16_13;
    uint8_t Required_16_14;
    uint8_t Required_16_15;
    uint8_t Required_16_16;
    uint8_t Required_16_17;
    uint8_t Required_16_18;
    uint8_t Required_16_19;
    uint8_t Required_16_20;
    uint8_t Required_16_21;
    uint8_t Required_16_22;
    uint8_t Required_16_23;
    uint8_t Required_16_24;
    uint8_t Required_16_25;
    uint8_t Required_16_26;
    uint8_t Required_16_27;
    uint8_t Required_16_28;
    uint8_t Required_16_29;
    enum XTAL_LVL_t{
        XTAL_LVL_1P65VPP = 0,
        XTAL_LVL_1P75VPP = 1,
        XTAL_LVL_1P90VPP = 2,
        XTAL_LVL_2P05VPP = 3
    };
    XTAL_LVL_t XTAL_LVL;
    uint8_t address24;
    enum PLL1_WND_SIZE_t{
        PLL1_WND_SIZE_5P5NS = 0,
        PLL1_WND_SIZE_10NS = 1,
        PLL1_WND_SIZE_18P6 = 2,
        PLL1_WND_SIZE_40NS = 3
    };
    PLL1_WND_SIZE_t PLL1_WND_SIZE;
    enum PLL1_R_DLY_t{
        PLL1_R_DLY_0PS = 0,
        PLL1_R_DLY_205PS = 1,
        PLL1_R_DLY_410PS = 2,
        PLL1_R_DLY_615PS = 3,
        PLL1_R_DLY_820PS = 4,
        PLL1_R_DLY_1025PS = 5,
        PLL1_R_DLY_1230PS = 6,
        PLL1_R_DLY_1345PS = 7
    };
    PLL1_R_DLY_t PLL1_R_DLY;
    uint8_t Required_24_11;
    enum PLL2_N_DLY_t{
        PLL2_N_DLY_0PS = 0,
        PLL2_N_DLY_205PS = 1,
        PLL2_N_DLY_410PS = 2,
        PLL2_N_DLY_615PS = 3,
        PLL2_N_DLY_820PS = 4,
        PLL2_N_DLY_1025PS = 5,
        PLL2_N_DLY_1230PS = 6,
        PLL2_N_DLY_1345PS = 7
    };
    PLL2_N_DLY_t PLL2_N_DLY;
    uint8_t Required_24_15;
    enum PLL2_R3_LF_t{
        PLL2_R3_LF_200OHM = 0,
        PLL2_R3_LF_1KILO_OHM = 1,
        PLL2_R3_LF_2KILO_OHM = 2,
        PLL2_R3_LF_4KILO_OHM = 3,
        PLL2_R3_LF_16KILO_OHM = 4
    };
    PLL2_R3_LF_t PLL2_R3_LF;
    uint8_t Required_24_19;
    enum PLL2_R4_LF_t{
        PLL2_R4_LF_200OHM = 0,
        PLL2_R4_LF_1KILO_OHM = 1,
        PLL2_R4_LF_2KILO_OHM = 2,
        PLL2_R4_LF_4KILO_OHM = 3,
        PLL2_R4_LF_16KILO_OHM = 4
    };
    PLL2_R4_LF_t PLL2_R4_LF;
    uint8_t Required_24_23;
    enum PLL2_C3_LF_t{
        PLL2_C3_LF_10PF = 0,
        PLL2_C3_LF_11PF = 1,
        PLL2_C3_LF_15PF = 2,
        PLL2_C3_LF_16PF = 3,
        PLL2_C3_LF_19PF = 4,
        PLL2_C3_LF_20PF = 5,
        PLL2_C3_LF_24PF = 6,
        PLL2_C3_LF_25PF = 7,
        PLL2_C3_LF_29PF = 8,
        PLL2_C3_LF_30PF = 9,
        PLL2_C3_LF_33PF = 10,
        PLL2_C3_LF_34PF = 11,
        PLL2_C3_LF_38PF = 12,
        PLL2_C3_LF_39PF = 13
    };
    PLL2_C3_LF_t PLL2_C3_LF;
    enum PLL2_C4_LF_t{
        PLL2_C4_LF_10PF = 0,
        PLL2_C4_LF_15PF = 1,
        PLL2_C4_LF_29PF = 2,
        PLL2_C4_LF_34PF = 3,
        PLL2_C4_LF_47PF = 4,
        PLL2_C4_LF_52PF = 5,
        PLL2_C4_LF_66PF = 6,
        PLL2_C4_LF_71PF = 7,
        PLL2_C4_LF_103PF = 8,
        PLL2_C4_LF_108PF = 9,
        PLL2_C4_LF_122PF = 10,
        PLL2_C4_LF_126PF = 11,
        PLL2_C4_LF_141PF = 12,
        PLL2_C4_LF_146PF = 13
    };
    PLL2_C4_LF_t PLL2_C4_LF;
    uint8_t addres25;
    uint8_t PLL2_CP_TRI_25;
    uint16_t PLL1_DLD_CNT_25;
    uint8_t Required_25;
    uint16_t DAC_CLK_DIV;
    uint8_t address26;
    enum PLL2_CP_TRI_26_t{
        PLL2_CP_TRI_26_PLL2_CPOUT2_ACTIVE = 0,
        PLL2_CP_TRI_26_PLL2CPOUT2T = 1
    };
    PLL2_CP_TRI_26_t PLL2_CP_TRI_26;
    uint16_t PLL2_DLD_CNT_26;
    uint8_t Required_26_20;
    uint8_t Required_26_21;
    uint8_t Required_26_22;
    uint8_t Required_26_23;
    uint8_t Required_26_24;
    uint8_t Required_26_25;
    enum PLL2_CP_GAIN_26_t{
        PLL2_CP_GAIN_26_100UA = 0,
        PLL2_CP_GAIN_26_400UA = 1,
        PLL2_CP_GAIN_26_1600UA = 2,
        PLL2_CP_GAIN_26_3200UA = 3
    };
    PLL2_CP_GAIN_26_t PLL2_CP_GAIN_26;
    enum PLL2_CP_POL_26_t{
        PLL2_CP_POL_26_NEG_SLOPE = 0,
        PLL2_CP_POL_26_POS_SLOPE = 1
    };
    PLL2_CP_POL_26_t PLL2_CP_POL_26;
    enum EN_PLL2_REF_2X_t{
        EN_PLL2_REF_2X_NORMAL_FREQ_REF = 0,
        EN_PLL2_REF_2X_DOUBLED_FREQ_REF = 1
    };
    EN_PLL2_REF_2X_t EN_PLL2_REF_2X;
    enum PLL2_WND_SIZE_t{
        PLL2_WND_SIZE_3P7NS = 2
    };
    PLL2_WND_SIZE_t PLL2_WND_SIZE;
    uint8_t address27;
    enum PLL1_CP_TRI_27_t{
        PLL1_CP_TRI_27_PLL2_CPOUT2_ACTIVE = 0,
        PLL1_CP_TRI_27_PLL2_CPOUT2TRI = 1
    };
    PLL1_CP_TRI_27_t PLL1_CP_TRI_27;
    uint16_t PLL1_R_27;
    enum CLKin0_PreR_DIV_t{
        CLKIN0_PRER_DIV_DIV1 = 0,
        CLKIN0_PRER_DIV_DIV2 = 1,
        CLKIN0_PRER_DIV_DIV4 = 2,
        CLKIN0_PRER_DIV_DIV8 = 3
    };
    CLKin0_PreR_DIV_t CLKin0_PreR_DIV;
    enum CLKin1_PreR_DIV_t{
        CLKIN1_PRER_DIV_DIV1 = 0,
        CLKIN1_PRER_DIV_DIV2 = 1,
        CLKIN1_PRER_DIV_DIV4 = 2,
        CLKIN1_PRER_DIV_DIV8 = 3
    };
    CLKin1_PreR_DIV_t CLKin1_PreR_DIV;
    enum CLKin2_PreR_DIV_t{
        CLKIN2_PRER_DIV_DIV1 = 0,
        CLKIN2_PRER_DIV_DIV2 = 1,
        CLKIN2_PRER_DIV_DIV4 = 2,
        CLKIN2_PRER_DIV_DIV8 = 3
    };
    CLKin2_PreR_DIV_t CLKin2_PreR_DIV;
    enum PLL1_CP_GAIN_27_t{
        PLL1_CP_GAIN_27_100UA = 0,
        PLL1_CP_GAIN_27_200UA = 1,
        PLL1_CP_GAIN_27_400UA = 2,
        PLL1_CP_GAIN_27_1600UA = 3
    };
    PLL1_CP_GAIN_27_t PLL1_CP_GAIN_27;
    enum PLL1_CP_POL_27_t{
        PLL1_CP_POL_27_NEG_SLOVE = 0,
        PLL1_CP_POL_27_POS_SLOPE = 1
    };
    PLL1_CP_POL_27_t PLL1_CP_POL_27;
    uint8_t Reqiured_27;
    uint8_t address28;
    uint8_t Required_28;
    uint16_t PLL1_N_28;
    uint16_t PLL2_R_28;
    uint8_t address29;
    uint32_t PLL2_N_CAL_29;
    enum PLL2_FAST_PDF_29_t{
        PLL2_FAST_PDF_29_100MHZ_LESS = 0,
        PLL2_FAST_PDF_29_100MHZ_MORE = 1
    };
    PLL2_FAST_PDF_29_t PLL2_FAST_PDF_29;
    enum OSCin_FREQ_29_t{
        OSCIN_FREQ_29_ZERO_TO_63MHZ = 0,
        OSCIN_FREQ_29_63_TO_127MHZ = 1,
        OSCIN_FREQ_29_127_TO_255MHZ = 2,
        OSCIN_FREQ_29_255_TO_400MHZ = 4
    };
    OSCin_FREQ_29_t OSCin_FREQ_29;
    uint8_t Required29;
    uint8_t address30;
    uint32_t PLL2_N_30;
    uint8_t Required_30_522;
    enum PLL2_P_30_t{
        PLL2_P_30_DIV_8 = 0,
        PLL2_P_30_DIV_2 = 1,
        PLL2_P_30_DIV_2A = 2,
        PLL2_P_30_DIV_3 = 3,
        PLL2_P_30_DIV_4 = 4,
        PLL2_P_30_DIV_5 = 5,
        PLL2_P_30_DIV_6 = 6,
        PLL2_P_30_DIV_7 = 7
    };
    PLL2_P_30_t PLL2_P_30;
    uint8_t Required_2731;
    uint8_t address31;
    enum uWire_LOCK_t{
        UWIRE_LOCK_REG_LOCKED = 0,
        UWIRE_LOCK_REG_UNLOCKED = 1
    };
    uWire_LOCK_t uWire_LOCK;
    uint16_t Required_615;
    enum READBACK_ADDR_t{
        READBACK_ADDR_R0 = 0,
        READBACK_ADDR_R1 = 1,
        READBACK_ADDR_R2 = 2,
        READBACK_ADDR_R3 = 3,
        READBACK_ADDR_R4 = 4,
        READBACK_ADDR_R5 = 5,
        READBACK_ADDR_R6 = 6,
        READBACK_ADDR_R7 = 7,
        READBACK_ADDR_R8 = 8,
        READBACK_ADDR_R10 = 10,
        READBACK_ADDR_R11 = 11,
        READBACK_ADDR_R12 = 12,
        READBACK_ADDR_R13 = 13,
        READBACK_ADDR_R14 = 14,
        READBACK_ADDR_R15 = 15,
        READBACK_ADDR_R24 = 24,
        READBACK_ADDR_R25 = 25,
        READBACK_ADDR_R26 = 26,
        READBACK_ADDR_R27 = 27,
        READBACK_ADDR_R28 = 28,
        READBACK_ADDR_R29 = 29,
        READBACK_ADDR_R30 = 30,
        READBACK_ADDR_R31 = 31
    };
    READBACK_ADDR_t READBACK_ADDR;
    enum READBACK_LE_t{
        READBACK_LE_LE_LOW = 0,
        READBACK_LE_LE_HIGH = 1
    };
    READBACK_LE_t READBACK_LE;
    uint16_t Required_2231;

    lmk04816_regs_t(void){
        _state = NULL;
        address0 = 0;
        CLKout0_1_DIV = 25;
        CLKout0_1_HS = 0;
        RESET = RESET_NO_RESET;
        CLKout0_1_DDLY = 0;
        CLKout0_ADLY_SEL = CLKOUT0_ADLY_SEL_D_PD;
        CLKout1_ADLY_SEL = CLKOUT1_ADLY_SEL_D_PD;
        Required_0 = 0;
        CLKout0_1_PD = CLKOUT0_1_PD_POWER_DOWN;
        address1 = 1;
        CLKout2_3_DIV = 25;
        CLKout2_3_HS = 0;
        Powerdown = POWERDOWN_NORMAL;
        CLKout2_3_DDLY = 0;
        CLKout2_ADLY_SEL = CLKOUT2_ADLY_SEL_D_PD;
        CLKout3_ADLY_SEL = CLKOUT3_ADLY_SEL_D_PD;
        Required_1 = 0;
        CLKout2_3_PD = CLKOUT2_3_PD_POWER_DOWN;
        address2 = 2;
        CLKout4_5_DIV = 25;
        CLKout4_5_HS = 0;
        Required_2_17 = 0;
        CLKout4_5_DDLY = 0;
        CLKout4_ADLY_SEL = CLKOUT4_ADLY_SEL_D_PD;
        CLKout5_ADLY_SEL = CLKOUT5_ADLY_SEL_D_PD;
        Required_2_30 = 0;
        CLKout4_5_PD = CLKOUT4_5_PD_POWER_DOWN;
        address3 = 3;
        CLKout6_7_DIV = 1;
        CLKout6_7_HS = 0;
        Required_3_17 = 0;
        CLKout6_7_DDLY = 0;
        CLKout6_ADLY_SEL = CLKOUT6_ADLY_SEL_D_PD;
        CLKout7_ADLY_SEL = CLKOUT7_ADLY_SEL_D_PD;
        CLKout6_7_OSCin_Sel = CLKOUT6_7_OSCIN_SEL_OSCIN;
        CLKout6_7_PD = CLKOUT6_7_PD_POWER_UP;
        address4 = 4;
        CLKout8_9_DIV = 25;
        CLKout8_9_HS = 0;
        Required_4_17 = 0;
        CLKout8_9_DDLY = 0;
        CLKout8_ADLY_SEL = CLKOUT8_ADLY_SEL_D_PD;
        CLKout9_ADLY_SEL = CLKOUT9_ADLY_SEL_D_PD;
        CLKout8_9_OSCin_Sel = CLKOUT8_9_OSCIN_SEL_VCO;
        CLKout8_9_PD = CLKOUT8_9_PD_POWER_UP;
        address5 = 5;
        CLKout10_11_DIV = 25;
        CLKout10_11_HS = 0;
        Required_5_17 = 0;
        CLKout10_11_DDLY = 0;
        CLKout10_ADLY_SEL = CLKOUT10_ADLY_SEL_D_PD;
        CLKout11_ADLY_SEL = CLKOUT11_ADLY_SEL_D_PD;
        Required_5_30 = 0;
        CLKout10_11_PD = CLKOUT10_11_PD_POWER_DOWN;
        address6 = 6;
        CLKout0_1_ADLY = 0;
        Required_6_10 = 0;
        CLKout2_3_ADLY = 0;
        CLKout0_TYPE = CLKOUT0_TYPE_P_DOWN;
        CLKout1_TYPE = CLKOUT1_TYPE_P_DOWN;
        CLKout2_TYPE = CLKOUT2_TYPE_P_DOWN;
        CLKout3_TYPE = CLKOUT3_TYPE_P_DOWN;
        address7 = 7;
        CLKout4_5_ADLY = 0;
        Required_7_10 = 0;
        CLKout6_7_ADLY = 0;
        CLKout4_TYPE = CLKOUT4_TYPE_P_DOWN;
        CLKout5_TYPE = CLKOUT5_TYPE_P_DOWN;
        CLKout6_TYPE = CLKOUT6_TYPE_P_DOWN;
        CLKout7_TYPE = CLKOUT7_TYPE_P_DOWN;
        address8 = 8;
        CLKout8_9_ADLY = 0;
        Required_8_10 = 0;
        CLKout10_11_ADLY = CLKOUT10_11_ADLY_P_DOWN;
        CLKout8_TYPE = CLKOUT8_TYPE_P_DOWN;
        CLKout9_TYPE = CLKOUT9_TYPE_P_DOWN;
        CLKout10_TYPE = CLKOUT10_TYPE_P_DOWN;
        CLKout11_TYPE = CLKOUT11_TYPE_P_DOWN;
        address9 = 9;
        Required_9_5 = 0;
        Required_9_6 = 1;
        Required_9_7 = 0;
        Required_9_8 = 1;
        Required_9_9 = 0;
        Required_9_10 = 1;
        Required_9_11 = 0;
        Required_9_12 = 1;
        Required_9_13 = 0;
        Required_9_14 = 1;
        Required_9_15 = 0;
        Required_9_16 = 1;
        Required_9_17 = 0;
        Required_9_18 = 1;
        Required_9_19 = 0;
        Required_9_20 = 1;
        Required_9_21 = 0;
        Required_9_22 = 1;
        Required_9_23 = 0;
        Required_9_24 = 1;
        Required_9_25 = 0;
        Required_9_26 = 1;
        Required_9_27 = 0;
        Required_9_28 = 1;
        Required_9_29 = 0;
        Required_9_30 = 1;
        Required_9_31 = 0;
        address10 = 10;
        FEEDBACK_MUX = 0;
        VCO_DIV = 2;
        EN_FEEDBACK_MUX = EN_FEEDBACK_MUX_POWERED_DOWN;
        VCO_MUX = VCO_MUX_JUST_VCO;
        Required_10_13 = 0;
        Required_10_14 = 1;
        Required_10_15 = 0;
        OSCout_DIV = 0;
        PD_OSCin = PD_OSCIN_NORMAL;
        OSCout10_MUX = OSCOUT10_MUX_BYPASS_DIV;
        Required_10_21 = 0;
        EN_OSCout0 = EN_OSCOUT0_ENABLED;
        Required_10_23 = 0;
        OSCout0_TYPE = 0;
        Required_10_28 = 1;
        Required_10_range = 0;
        address11 = 11;
        EN_PLL2_XTAL = EN_PLL2_XTAL_OSC_DISABLED;
        Required_11 = 0;
        SYNC_TYPE = SYNC_TYPE_IN_PULL_UP;
        SYNC_EN_AUTO = SYNC_EN_AUTO_MAN_SYNC;
        SYNC_POL_INV = SYNC_POL_INV_SYNC_LOW;
        SYNC_QUAL = SYNC_QUAL_NOT_QUAL;
        SYNC_CLKin2_MUX = SYNC_CLKIN2_MUX_LOG_LOW;
        NO_SYNC_CLKout0_1 = NO_SYNC_CLKOUT0_1_CLOCK_XY_SYNC;
        NO_SYNC_CLKout2_3 = NO_SYNC_CLKOUT2_3_CLOCK_XY_SYNC;
        NO_SYNC_CLKout4_5 = NO_SYNC_CLKOUT4_5_CLOCK_XY_NOSYNC;
        NO_SYNC_CLKout6_7 = NO_SYNC_CLKOUT6_7_CLOCK_XY_NOSYNC;
        NO_SYNC_CLKout8_9 = NO_SYNC_CLKOUT8_9_CLOCK_XY_SYNC;
        NO_SYNC_CLKout10_11 = NO_SYNC_CLKOUT10_11_CLOCK_XY_SYNC;
        EN_SYNC = EN_SYNC_ENABLE;
        MODE = MODE_DUAL_INT;
        address12 = 12;
        HOLDOVER_MODE = HOLDOVER_MODE_ENABLED;
        EN_TRACK = EN_TRACK_ENABLED;
        Required_12_range917 = 0;
        Required_12_range1819 = 1;
        Required_12_20 = 0;
        Required_LE_12 = 0;
        SYNC_PLL1_DLD = SYNC_PLL1_DLD_SYNC_MODE_NOFORCE;
        SYNC_PLL2_DLD = SYNC_PLL2_DLD_SYNC_MODE_NOFORCE;
        LD_TYPE = LD_TYPE_OUT_PUSH_PULL;
        LD_MUX = LD_MUX_BOTH;
        address13 = 13;
        EN_CLKin0 = EN_CLKIN0_VALID_USE;
        EN_CLKin1 = EN_CLKIN1_VALID_USE;
        EN_CLKin2 = EN_CLKIN2_VALID_USE;
        CLKin_Sel_INV = CLKIN_SEL_INV_ACTIVE_HIGH;
        CLKin_Select_MODE = CLKIN_SELECT_MODE_PIN_SEL_MODE;
        Status_CLKin0_MUX = STATUS_CLKIN0_MUX_LOG_LOW;
        DISABLE_DLD1_DET = DISABLE_DLD1_DET_PLL1_DLD_CAUSE_EVENT;
        Status_CLKin0_TYPE = STATUS_CLKIN0_TYPE_IN_PULL_DOWN;
        Required_13_19 = 0;
        Status_CLKin1_MUX = STATUS_CLKIN1_MUX_LOG_LOW;
        Required_19_23 = 0;
        HOLDOVER_TYPE = HOLDOVER_TYPE_OUT_PUSH_PULL;
        HOLDOVER_MUX = HOLDOVER_MUX_UWIRE_RB;
        address14 = 14;
        EN_VTUNE_RAIL_DET = EN_VTUNE_RAIL_DET_DISABLED;
        DAC_LOW_TRIP = 0;
        Required_14_1213 = 0;
        DAC_HIGH_TRIP = 0;
        CLKin0_BUF_TYPE = CLKIN0_BUF_TYPE_BIPOLAR;
        CLKin1_BUF_TYPE = CLKIN1_BUF_TYPE_BIPOLAR;
        CLKin2_BUF_TYPE = CLKIN2_BUF_TYPE_BIPOLAR;
        Required_14_23 = 0;
        Status_CLKin1_TYPE = STATUS_CLKIN1_TYPE_IN_PULL_DOWN;
        Required_14_27 = 0;
        EN_LOS = EN_LOS_ENABLE_TIMEOUT;
        Required_14_29 = 0;
        LOS_TIMEOUT = LOS_TIMEOUT_1200NS_AT_4P2KHZ;
        address15 = 15;
        FORCE_HOLDOVER = FORCE_HOLDOVER_DISABLED;
        HOLDOVER_DLD_CNT = 512;
        EN_MAN_DAC = EN_MAN_DAC_DISABLED;
        Required_15 = 0;
        MAN_DAC = 512;
        address16 = 16;
        Required_16_5 = 0;
        Required_16_6 = 0;
        Required_16_7 = 0;
        Required_16_8 = 0;
        Required_16_9 = 0;
        Required_16_10 = 1;
        Required_16_11 = 0;
        Required_16_12 = 0;
        Required_16_13 = 0;
        Required_16_14 = 0;
        Required_16_15 = 0;
        Required_16_16 = 1;
        Required_16_17 = 0;
        Required_16_18 = 1;
        Required_16_19 = 0;
        Required_16_20 = 1;
        Required_16_21 = 0;
        Required_16_22 = 1;
        Required_16_23 = 0;
        Required_16_24 = 1;
        Required_16_25 = 0;
        Required_16_26 = 0;
        Required_16_27 = 0;
        Required_16_28 = 0;
        Required_16_29 = 0;
        XTAL_LVL = XTAL_LVL_1P65VPP;
        address24 = 24;
        PLL1_WND_SIZE = PLL1_WND_SIZE_40NS;
        PLL1_R_DLY = PLL1_R_DLY_0PS;
        Required_24_11 = 0;
        PLL2_N_DLY = PLL2_N_DLY_0PS;
        Required_24_15 = 0;
        PLL2_R3_LF = PLL2_R3_LF_200OHM;
        Required_24_19 = 0;
        PLL2_R4_LF = PLL2_R4_LF_200OHM;
        Required_24_23 = 0;
        PLL2_C3_LF = PLL2_C3_LF_10PF;
        PLL2_C4_LF = PLL2_C4_LF_10PF;
        addres25 = 25;
        PLL2_CP_TRI_25 = 0;
        PLL1_DLD_CNT_25 = 1024;
        Required_25 = 0;
        DAC_CLK_DIV = 4;
        address26 = 26;
        PLL2_CP_TRI_26 = PLL2_CP_TRI_26_PLL2_CPOUT2_ACTIVE;
        PLL2_DLD_CNT_26 = 81;
        Required_26_20 = 0;
        Required_26_21 = 1;
        Required_26_22 = 0;
        Required_26_23 = 1;
        Required_26_24 = 1;
        Required_26_25 = 1;
        PLL2_CP_GAIN_26 = PLL2_CP_GAIN_26_3200UA;
        PLL2_CP_POL_26 = PLL2_CP_POL_26_NEG_SLOPE;
        EN_PLL2_REF_2X = EN_PLL2_REF_2X_NORMAL_FREQ_REF;
        PLL2_WND_SIZE = PLL2_WND_SIZE_3P7NS;
        address27 = 27;
        PLL1_CP_TRI_27 = PLL1_CP_TRI_27_PLL2_CPOUT2_ACTIVE;
        PLL1_R_27 = 96;
        CLKin0_PreR_DIV = CLKIN0_PRER_DIV_DIV1;
        CLKin1_PreR_DIV = CLKIN1_PRER_DIV_DIV1;
        CLKin2_PreR_DIV = CLKIN2_PRER_DIV_DIV1;
        PLL1_CP_GAIN_27 = PLL1_CP_GAIN_27_100UA;
        PLL1_CP_POL_27 = PLL1_CP_POL_27_POS_SLOPE;
        Reqiured_27 = 0;
        address28 = 28;
        Required_28 = 0;
        PLL1_N_28 = 192;
        PLL2_R_28 = 4;
        address29 = 29;
        PLL2_N_CAL_29 = 48;
        PLL2_FAST_PDF_29 = PLL2_FAST_PDF_29_100MHZ_MORE;
        OSCin_FREQ_29 = OSCIN_FREQ_29_63_TO_127MHZ;
        Required29 = 0;
        address30 = 30;
        PLL2_N_30 = 48;
        Required_30_522 = 0;
        PLL2_P_30 = PLL2_P_30_DIV_2A;
        Required_2731 = 0;
        address31 = 31;
        uWire_LOCK = UWIRE_LOCK_REG_LOCKED;
        Required_615 = 0;
        READBACK_ADDR = READBACK_ADDR_R31;
        READBACK_LE = READBACK_LE_LE_LOW;
        Required_2231 = 0;
    }

    ~lmk04816_regs_t(void){
        delete _state;
    }

    
    
    
    
    uint32_t get_reg(int addr){
        uint32_t reg = 0;
        switch(addr){
        case 0:
            reg |= (uint32_t(address0) & 0x1f) << 0;
            reg |= (uint32_t(CLKout0_1_DIV) & 0x7ff) << 5;
            reg |= (uint32_t(CLKout0_1_HS) & 0x1) << 16;
            reg |= (uint32_t(RESET) & 0x1) << 17;
            reg |= (uint32_t(CLKout0_1_DDLY) & 0x3ff) << 18;
            reg |= (uint32_t(CLKout0_ADLY_SEL) & 0x1) << 28;
            reg |= (uint32_t(CLKout1_ADLY_SEL) & 0x1) << 29;
            reg |= (uint32_t(Required_0) & 0x1) << 30;
            reg |= (uint32_t(CLKout0_1_PD) & 0x1) << 31;
            break;
        case 1:
            reg |= (uint32_t(address1) & 0x1f) << 0;
            reg |= (uint32_t(CLKout2_3_DIV) & 0x7ff) << 5;
            reg |= (uint32_t(CLKout2_3_HS) & 0x1) << 16;
            reg |= (uint32_t(Powerdown) & 0x1) << 17;
            reg |= (uint32_t(CLKout2_3_DDLY) & 0x3ff) << 18;
            reg |= (uint32_t(CLKout2_ADLY_SEL) & 0x1) << 28;
            reg |= (uint32_t(CLKout3_ADLY_SEL) & 0x1) << 29;
            reg |= (uint32_t(Required_1) & 0x1) << 30;
            reg |= (uint32_t(CLKout2_3_PD) & 0x1) << 31;
            break;
        case 2:
            reg |= (uint32_t(address2) & 0x1f) << 0;
            reg |= (uint32_t(CLKout4_5_DIV) & 0x7ff) << 5;
            reg |= (uint32_t(CLKout4_5_HS) & 0x1) << 16;
            reg |= (uint32_t(Required_2_17) & 0x1) << 17;
            reg |= (uint32_t(CLKout4_5_DDLY) & 0x3ff) << 18;
            reg |= (uint32_t(CLKout4_ADLY_SEL) & 0x1) << 28;
            reg |= (uint32_t(CLKout5_ADLY_SEL) & 0x1) << 29;
            reg |= (uint32_t(Required_2_30) & 0x1) << 30;
            reg |= (uint32_t(CLKout4_5_PD) & 0x1) << 31;
            break;
        case 3:
            reg |= (uint32_t(address3) & 0x1f) << 0;
            reg |= (uint32_t(CLKout6_7_DIV) & 0x7ff) << 5;
            reg |= (uint32_t(CLKout6_7_HS) & 0x1) << 16;
            reg |= (uint32_t(Required_3_17) & 0x1) << 17;
            reg |= (uint32_t(CLKout6_7_DDLY) & 0x3ff) << 18;
            reg |= (uint32_t(CLKout6_ADLY_SEL) & 0x1) << 28;
            reg |= (uint32_t(CLKout7_ADLY_SEL) & 0x1) << 29;
            reg |= (uint32_t(CLKout6_7_OSCin_Sel) & 0x1) << 30;
            reg |= (uint32_t(CLKout6_7_PD) & 0x1) << 31;
            break;
        case 4:
            reg |= (uint32_t(address4) & 0x1f) << 0;
            reg |= (uint32_t(CLKout8_9_DIV) & 0x7ff) << 5;
            reg |= (uint32_t(CLKout8_9_HS) & 0x1) << 16;
            reg |= (uint32_t(Required_4_17) & 0x1) << 17;
            reg |= (uint32_t(CLKout8_9_DDLY) & 0x3ff) << 18;
            reg |= (uint32_t(CLKout8_ADLY_SEL) & 0x1) << 28;
            reg |= (uint32_t(CLKout9_ADLY_SEL) & 0x1) << 29;
            reg |= (uint32_t(CLKout8_9_OSCin_Sel) & 0x1) << 30;
            reg |= (uint32_t(CLKout8_9_PD) & 0x1) << 31;
            break;
        case 5:
            reg |= (uint32_t(address5) & 0x1f) << 0;
            reg |= (uint32_t(CLKout10_11_DIV) & 0x7ff) << 5;
            reg |= (uint32_t(CLKout10_11_HS) & 0x1) << 16;
            reg |= (uint32_t(Required_5_17) & 0x1) << 17;
            reg |= (uint32_t(CLKout10_11_DDLY) & 0x3ff) << 18;
            reg |= (uint32_t(CLKout10_ADLY_SEL) & 0x1) << 28;
            reg |= (uint32_t(CLKout11_ADLY_SEL) & 0x1) << 29;
            reg |= (uint32_t(Required_5_30) & 0x1) << 30;
            reg |= (uint32_t(CLKout10_11_PD) & 0x1) << 31;
            break;
        case 6:
            reg |= (uint32_t(address6) & 0x1f) << 0;
            reg |= (uint32_t(CLKout0_1_ADLY) & 0x1f) << 5;
            reg |= (uint32_t(Required_6_10) & 0x1) << 10;
            reg |= (uint32_t(CLKout2_3_ADLY) & 0x1f) << 11;
            reg |= (uint32_t(CLKout0_TYPE) & 0xf) << 16;
            reg |= (uint32_t(CLKout1_TYPE) & 0xf) << 20;
            reg |= (uint32_t(CLKout2_TYPE) & 0xf) << 24;
            reg |= (uint32_t(CLKout3_TYPE) & 0xf) << 28;
            break;
        case 7:
            reg |= (uint32_t(address7) & 0x1f) << 0;
            reg |= (uint32_t(CLKout4_5_ADLY) & 0x1f) << 5;
            reg |= (uint32_t(Required_7_10) & 0x1) << 10;
            reg |= (uint32_t(CLKout6_7_ADLY) & 0x1f) << 11;
            reg |= (uint32_t(CLKout4_TYPE) & 0xf) << 16;
            reg |= (uint32_t(CLKout5_TYPE) & 0xf) << 20;
            reg |= (uint32_t(CLKout6_TYPE) & 0xf) << 24;
            reg |= (uint32_t(CLKout7_TYPE) & 0xf) << 28;
            break;
        case 8:
            reg |= (uint32_t(address8) & 0x1f) << 0;
            reg |= (uint32_t(CLKout8_9_ADLY) & 0x1f) << 5;
            reg |= (uint32_t(Required_8_10) & 0x1) << 10;
            reg |= (uint32_t(CLKout10_11_ADLY) & 0x1f) << 11;
            reg |= (uint32_t(CLKout8_TYPE) & 0xf) << 16;
            reg |= (uint32_t(CLKout9_TYPE) & 0xf) << 20;
            reg |= (uint32_t(CLKout10_TYPE) & 0xf) << 24;
            reg |= (uint32_t(CLKout11_TYPE) & 0xf) << 28;
            break;
        case 9:
            reg |= (uint32_t(address9) & 0x1f) << 0;
            reg |= (uint32_t(Required_9_5) & 0x1) << 5;
            reg |= (uint32_t(Required_9_6) & 0x1) << 6;
            reg |= (uint32_t(Required_9_7) & 0x1) << 7;
            reg |= (uint32_t(Required_9_8) & 0x1) << 8;
            reg |= (uint32_t(Required_9_9) & 0x1) << 9;
            reg |= (uint32_t(Required_9_10) & 0x1) << 10;
            reg |= (uint32_t(Required_9_11) & 0x1) << 11;
            reg |= (uint32_t(Required_9_12) & 0x1) << 12;
            reg |= (uint32_t(Required_9_13) & 0x1) << 13;
            reg |= (uint32_t(Required_9_14) & 0x1) << 14;
            reg |= (uint32_t(Required_9_15) & 0x1) << 15;
            reg |= (uint32_t(Required_9_16) & 0x1) << 16;
            reg |= (uint32_t(Required_9_17) & 0x1) << 17;
            reg |= (uint32_t(Required_9_18) & 0x1) << 18;
            reg |= (uint32_t(Required_9_19) & 0x1) << 19;
            reg |= (uint32_t(Required_9_20) & 0x1) << 20;
            reg |= (uint32_t(Required_9_21) & 0x1) << 21;
            reg |= (uint32_t(Required_9_22) & 0x1) << 22;
            reg |= (uint32_t(Required_9_23) & 0x1) << 23;
            reg |= (uint32_t(Required_9_24) & 0x1) << 24;
            reg |= (uint32_t(Required_9_25) & 0x1) << 25;
            reg |= (uint32_t(Required_9_26) & 0x1) << 26;
            reg |= (uint32_t(Required_9_27) & 0x1) << 27;
            reg |= (uint32_t(Required_9_28) & 0x1) << 28;
            reg |= (uint32_t(Required_9_29) & 0x1) << 29;
            reg |= (uint32_t(Required_9_30) & 0x1) << 30;
            reg |= (uint32_t(Required_9_31) & 0x1) << 31;
            break;
        case 10:
            reg |= (uint32_t(address10) & 0x1f) << 0;
            reg |= (uint32_t(FEEDBACK_MUX) & 0x7) << 5;
            reg |= (uint32_t(VCO_DIV) & 0x7) << 8;
            reg |= (uint32_t(EN_FEEDBACK_MUX) & 0x1) << 11;
            reg |= (uint32_t(VCO_MUX) & 0x1) << 12;
            reg |= (uint32_t(Required_10_13) & 0x1) << 13;
            reg |= (uint32_t(Required_10_14) & 0x1) << 14;
            reg |= (uint32_t(Required_10_15) & 0x1) << 15;
            reg |= (uint32_t(OSCout_DIV) & 0x7) << 16;
            reg |= (uint32_t(PD_OSCin) & 0x1) << 19;
            reg |= (uint32_t(OSCout10_MUX) & 0x1) << 20;
            reg |= (uint32_t(Required_10_21) & 0x1) << 21;
            reg |= (uint32_t(EN_OSCout0) & 0x1) << 22;
            reg |= (uint32_t(Required_10_23) & 0x1) << 23;
            reg |= (uint32_t(OSCout0_TYPE) & 0xf) << 24;
            reg |= (uint32_t(Required_10_28) & 0x1) << 28;
            reg |= (uint32_t(Required_10_range) & 0x7) << 29;
            break;
        case 11:
            reg |= (uint32_t(address11) & 0x1f) << 0;
            reg |= (uint32_t(EN_PLL2_XTAL) & 0x1) << 5;
            reg |= (uint32_t(Required_11) & 0x3f) << 6;
            reg |= (uint32_t(SYNC_TYPE) & 0x7) << 12;
            reg |= (uint32_t(SYNC_EN_AUTO) & 0x1) << 15;
            reg |= (uint32_t(SYNC_POL_INV) & 0x1) << 16;
            reg |= (uint32_t(SYNC_QUAL) & 0x1) << 17;
            reg |= (uint32_t(SYNC_CLKin2_MUX) & 0x3) << 18;
            reg |= (uint32_t(NO_SYNC_CLKout0_1) & 0x1) << 20;
            reg |= (uint32_t(NO_SYNC_CLKout2_3) & 0x1) << 21;
            reg |= (uint32_t(NO_SYNC_CLKout4_5) & 0x1) << 22;
            reg |= (uint32_t(NO_SYNC_CLKout6_7) & 0x1) << 23;
            reg |= (uint32_t(NO_SYNC_CLKout8_9) & 0x1) << 24;
            reg |= (uint32_t(NO_SYNC_CLKout10_11) & 0x1) << 25;
            reg |= (uint32_t(EN_SYNC) & 0x1) << 26;
            reg |= (uint32_t(MODE) & 0x1f) << 27;
            break;
        case 12:
            reg |= (uint32_t(address12) & 0x1f) << 0;
            reg |= (uint32_t(HOLDOVER_MODE) & 0x3) << 6;
            reg |= (uint32_t(EN_TRACK) & 0x1) << 8;
            reg |= (uint32_t(Required_12_range917) & 0x1ff) << 9;
            reg |= (uint32_t(Required_12_range1819) & 0x3) << 18;
            reg |= (uint32_t(Required_12_20) & 0x1) << 20;
            reg |= (uint32_t(Required_LE_12) & 0x1) << 21;
            reg |= (uint32_t(SYNC_PLL1_DLD) & 0x1) << 22;
            reg |= (uint32_t(SYNC_PLL2_DLD) & 0x1) << 23;
            reg |= (uint32_t(LD_TYPE) & 0x7) << 24;
            reg |= (uint32_t(LD_MUX) & 0x1f) << 27;
            break;
        case 13:
            reg |= (uint32_t(address13) & 0x1f) << 0;
            reg |= (uint32_t(EN_CLKin0) & 0x1) << 5;
            reg |= (uint32_t(EN_CLKin1) & 0x1) << 6;
            reg |= (uint32_t(EN_CLKin2) & 0x1) << 7;
            reg |= (uint32_t(CLKin_Sel_INV) & 0x1) << 8;
            reg |= (uint32_t(CLKin_Select_MODE) & 0x7) << 9;
            reg |= (uint32_t(Status_CLKin0_MUX) & 0x7) << 12;
            reg |= (uint32_t(DISABLE_DLD1_DET) & 0x1) << 15;
            reg |= (uint32_t(Status_CLKin0_TYPE) & 0x7) << 16;
            reg |= (uint32_t(Required_13_19) & 0x1) << 19;
            reg |= (uint32_t(Status_CLKin1_MUX) & 0x7) << 20;
            reg |= (uint32_t(Required_19_23) & 0x1) << 23;
            reg |= (uint32_t(HOLDOVER_TYPE) & 0x7) << 24;
            reg |= (uint32_t(HOLDOVER_MUX) & 0x1f) << 27;
            break;
        case 14:
            reg |= (uint32_t(address14) & 0x1f) << 0;
            reg |= (uint32_t(EN_VTUNE_RAIL_DET) & 0x1) << 5;
            reg |= (uint32_t(DAC_LOW_TRIP) & 0x3f) << 6;
            reg |= (uint32_t(Required_14_1213) & 0x3) << 12;
            reg |= (uint32_t(DAC_HIGH_TRIP) & 0x3f) << 14;
            reg |= (uint32_t(CLKin0_BUF_TYPE) & 0x1) << 20;
            reg |= (uint32_t(CLKin1_BUF_TYPE) & 0x1) << 21;
            reg |= (uint32_t(CLKin2_BUF_TYPE) & 0x1) << 22;
            reg |= (uint32_t(Required_14_23) & 0x1) << 23;
            reg |= (uint32_t(Status_CLKin1_TYPE) & 0x7) << 24;
            reg |= (uint32_t(Required_14_27) & 0x1) << 27;
            reg |= (uint32_t(EN_LOS) & 0x1) << 28;
            reg |= (uint32_t(Required_14_29) & 0x1) << 29;
            reg |= (uint32_t(LOS_TIMEOUT) & 0x3) << 30;
            break;
        case 15:
            reg |= (uint32_t(address15) & 0x1f) << 0;
            reg |= (uint32_t(FORCE_HOLDOVER) & 0x1) << 5;
            reg |= (uint32_t(HOLDOVER_DLD_CNT) & 0x3fff) << 6;
            reg |= (uint32_t(EN_MAN_DAC) & 0x1) << 20;
            reg |= (uint32_t(Required_15) & 0x1) << 21;
            reg |= (uint32_t(MAN_DAC) & 0x3ff) << 22;
            break;
        case 16:
            reg |= (uint32_t(address16) & 0x1f) << 0;
            reg |= (uint32_t(Required_16_5) & 0x1) << 5;
            reg |= (uint32_t(Required_16_6) & 0x1) << 6;
            reg |= (uint32_t(Required_16_7) & 0x1) << 7;
            reg |= (uint32_t(Required_16_8) & 0x1) << 8;
            reg |= (uint32_t(Required_16_9) & 0x1) << 9;
            reg |= (uint32_t(Required_16_10) & 0x1) << 10;
            reg |= (uint32_t(Required_16_11) & 0x1) << 11;
            reg |= (uint32_t(Required_16_12) & 0x1) << 12;
            reg |= (uint32_t(Required_16_13) & 0x1) << 13;
            reg |= (uint32_t(Required_16_14) & 0x1) << 14;
            reg |= (uint32_t(Required_16_15) & 0x1) << 15;
            reg |= (uint32_t(Required_16_16) & 0x1) << 16;
            reg |= (uint32_t(Required_16_17) & 0x1) << 17;
            reg |= (uint32_t(Required_16_18) & 0x1) << 18;
            reg |= (uint32_t(Required_16_19) & 0x1) << 19;
            reg |= (uint32_t(Required_16_20) & 0x1) << 20;
            reg |= (uint32_t(Required_16_21) & 0x1) << 21;
            reg |= (uint32_t(Required_16_22) & 0x1) << 22;
            reg |= (uint32_t(Required_16_23) & 0x1) << 23;
            reg |= (uint32_t(Required_16_24) & 0x1) << 24;
            reg |= (uint32_t(Required_16_25) & 0x1) << 25;
            reg |= (uint32_t(Required_16_26) & 0x1) << 26;
            reg |= (uint32_t(Required_16_27) & 0x1) << 27;
            reg |= (uint32_t(Required_16_28) & 0x1) << 28;
            reg |= (uint32_t(Required_16_29) & 0x1) << 29;
            reg |= (uint32_t(XTAL_LVL) & 0x3) << 30;
            break;
        case 24:
            reg |= (uint32_t(address24) & 0x1f) << 0;
            reg |= (uint32_t(PLL1_WND_SIZE) & 0x3) << 6;
            reg |= (uint32_t(PLL1_R_DLY) & 0x7) << 8;
            reg |= (uint32_t(Required_24_11) & 0x1) << 11;
            reg |= (uint32_t(PLL2_N_DLY) & 0x7) << 12;
            reg |= (uint32_t(Required_24_15) & 0x1) << 15;
            reg |= (uint32_t(PLL2_R3_LF) & 0x7) << 16;
            reg |= (uint32_t(Required_24_19) & 0x1) << 19;
            reg |= (uint32_t(PLL2_R4_LF) & 0x7) << 20;
            reg |= (uint32_t(Required_24_23) & 0x1) << 23;
            reg |= (uint32_t(PLL2_C3_LF) & 0xf) << 24;
            reg |= (uint32_t(PLL2_C4_LF) & 0xf) << 28;
            break;
        case 25:
            reg |= (uint32_t(addres25) & 0x1f) << 0;
            reg |= (uint32_t(PLL2_CP_TRI_25) & 0x1) << 5;
            reg |= (uint32_t(PLL1_DLD_CNT_25) & 0x3fff) << 6;
            reg |= (uint32_t(Required_25) & 0x3) << 20;
            reg |= (uint32_t(DAC_CLK_DIV) & 0x3ff) << 22;
            break;
        case 26:
            reg |= (uint32_t(address26) & 0x1f) << 0;
            reg |= (uint32_t(PLL2_CP_TRI_26) & 0x1) << 5;
            reg |= (uint32_t(PLL2_DLD_CNT_26) & 0x3fff) << 6;
            reg |= (uint32_t(Required_26_20) & 0x1) << 20;
            reg |= (uint32_t(Required_26_21) & 0x1) << 21;
            reg |= (uint32_t(Required_26_22) & 0x1) << 22;
            reg |= (uint32_t(Required_26_23) & 0x1) << 23;
            reg |= (uint32_t(Required_26_24) & 0x1) << 24;
            reg |= (uint32_t(Required_26_25) & 0x1) << 25;
            reg |= (uint32_t(PLL2_CP_GAIN_26) & 0x3) << 26;
            reg |= (uint32_t(PLL2_CP_POL_26) & 0x1) << 28;
            reg |= (uint32_t(EN_PLL2_REF_2X) & 0x1) << 29;
            reg |= (uint32_t(PLL2_WND_SIZE) & 0x3) << 30;
            break;
        case 27:
            reg |= (uint32_t(address27) & 0x1f) << 0;
            reg |= (uint32_t(PLL1_CP_TRI_27) & 0x1) << 5;
            reg |= (uint32_t(PLL1_R_27) & 0x3fff) << 6;
            reg |= (uint32_t(CLKin0_PreR_DIV) & 0x3) << 20;
            reg |= (uint32_t(CLKin1_PreR_DIV) & 0x3) << 22;
            reg |= (uint32_t(CLKin2_PreR_DIV) & 0x3) << 24;
            reg |= (uint32_t(PLL1_CP_GAIN_27) & 0x3) << 26;
            reg |= (uint32_t(PLL1_CP_POL_27) & 0x1) << 28;
            reg |= (uint32_t(Reqiured_27) & 0x7) << 29;
            break;
        case 28:
            reg |= (uint32_t(address28) & 0x1f) << 0;
            reg |= (uint32_t(Required_28) & 0x1) << 5;
            reg |= (uint32_t(PLL1_N_28) & 0x3fff) << 6;
            reg |= (uint32_t(PLL2_R_28) & 0xfff) << 20;
            break;
        case 29:
            reg |= (uint32_t(address29) & 0x1f) << 0;
            reg |= (uint32_t(PLL2_N_CAL_29) & 0x3ffff) << 5;
            reg |= (uint32_t(PLL2_FAST_PDF_29) & 0x1) << 23;
            reg |= (uint32_t(OSCin_FREQ_29) & 0x7) << 24;
            reg |= (uint32_t(Required29) & 0x1f) << 27;
            break;
        case 30:
            reg |= (uint32_t(address30) & 0x1f) << 0;
            reg |= (uint32_t(PLL2_N_30) & 0x3ffff) << 5;
            reg |= (uint32_t(Required_30_522) & 0x1) << 23;
            reg |= (uint32_t(PLL2_P_30) & 0x7) << 24;
            reg |= (uint32_t(Required_2731) & 0x1f) << 27;
            break;
        case 31:
            reg |= (uint32_t(address31) & 0x1f) << 0;
            reg |= (uint32_t(uWire_LOCK) & 0x1) << 5;
            reg |= (uint32_t(Required_615) & 0x3ff) << 6;
            reg |= (uint32_t(READBACK_ADDR) & 0x1f) << 16;
            reg |= (uint32_t(READBACK_LE) & 0x1) << 21;
            reg |= (uint32_t(Required_2231) & 0x3ff) << 22;
            break;
        }
        return reg;
    }

    void save_state(void){
        if (_state == NULL) _state = new lmk04816_regs_t();
        _state->address0 = this->address0;
        _state->CLKout0_1_DIV = this->CLKout0_1_DIV;
        _state->CLKout0_1_HS = this->CLKout0_1_HS;
        _state->RESET = this->RESET;
        _state->CLKout0_1_DDLY = this->CLKout0_1_DDLY;
        _state->CLKout0_ADLY_SEL = this->CLKout0_ADLY_SEL;
        _state->CLKout1_ADLY_SEL = this->CLKout1_ADLY_SEL;
        _state->Required_0 = this->Required_0;
        _state->CLKout0_1_PD = this->CLKout0_1_PD;
        _state->address1 = this->address1;
        _state->CLKout2_3_DIV = this->CLKout2_3_DIV;
        _state->CLKout2_3_HS = this->CLKout2_3_HS;
        _state->Powerdown = this->Powerdown;
        _state->CLKout2_3_DDLY = this->CLKout2_3_DDLY;
        _state->CLKout2_ADLY_SEL = this->CLKout2_ADLY_SEL;
        _state->CLKout3_ADLY_SEL = this->CLKout3_ADLY_SEL;
        _state->Required_1 = this->Required_1;
        _state->CLKout2_3_PD = this->CLKout2_3_PD;
        _state->address2 = this->address2;
        _state->CLKout4_5_DIV = this->CLKout4_5_DIV;
        _state->CLKout4_5_HS = this->CLKout4_5_HS;
        _state->Required_2_17 = this->Required_2_17;
        _state->CLKout4_5_DDLY = this->CLKout4_5_DDLY;
        _state->CLKout4_ADLY_SEL = this->CLKout4_ADLY_SEL;
        _state->CLKout5_ADLY_SEL = this->CLKout5_ADLY_SEL;
        _state->Required_2_30 = this->Required_2_30;
        _state->CLKout4_5_PD = this->CLKout4_5_PD;
        _state->address3 = this->address3;
        _state->CLKout6_7_DIV = this->CLKout6_7_DIV;
        _state->CLKout6_7_HS = this->CLKout6_7_HS;
        _state->Required_3_17 = this->Required_3_17;
        _state->CLKout6_7_DDLY = this->CLKout6_7_DDLY;
        _state->CLKout6_ADLY_SEL = this->CLKout6_ADLY_SEL;
        _state->CLKout7_ADLY_SEL = this->CLKout7_ADLY_SEL;
        _state->CLKout6_7_OSCin_Sel = this->CLKout6_7_OSCin_Sel;
        _state->CLKout6_7_PD = this->CLKout6_7_PD;
        _state->address4 = this->address4;
        _state->CLKout8_9_DIV = this->CLKout8_9_DIV;
        _state->CLKout8_9_HS = this->CLKout8_9_HS;
        _state->Required_4_17 = this->Required_4_17;
        _state->CLKout8_9_DDLY = this->CLKout8_9_DDLY;
        _state->CLKout8_ADLY_SEL = this->CLKout8_ADLY_SEL;
        _state->CLKout9_ADLY_SEL = this->CLKout9_ADLY_SEL;
        _state->CLKout8_9_OSCin_Sel = this->CLKout8_9_OSCin_Sel;
        _state->CLKout8_9_PD = this->CLKout8_9_PD;
        _state->address5 = this->address5;
        _state->CLKout10_11_DIV = this->CLKout10_11_DIV;
        _state->CLKout10_11_HS = this->CLKout10_11_HS;
        _state->Required_5_17 = this->Required_5_17;
        _state->CLKout10_11_DDLY = this->CLKout10_11_DDLY;
        _state->CLKout10_ADLY_SEL = this->CLKout10_ADLY_SEL;
        _state->CLKout11_ADLY_SEL = this->CLKout11_ADLY_SEL;
        _state->Required_5_30 = this->Required_5_30;
        _state->CLKout10_11_PD = this->CLKout10_11_PD;
        _state->address6 = this->address6;
        _state->CLKout0_1_ADLY = this->CLKout0_1_ADLY;
        _state->Required_6_10 = this->Required_6_10;
        _state->CLKout2_3_ADLY = this->CLKout2_3_ADLY;
        _state->CLKout0_TYPE = this->CLKout0_TYPE;
        _state->CLKout1_TYPE = this->CLKout1_TYPE;
        _state->CLKout2_TYPE = this->CLKout2_TYPE;
        _state->CLKout3_TYPE = this->CLKout3_TYPE;
        _state->address7 = this->address7;
        _state->CLKout4_5_ADLY = this->CLKout4_5_ADLY;
        _state->Required_7_10 = this->Required_7_10;
        _state->CLKout6_7_ADLY = this->CLKout6_7_ADLY;
        _state->CLKout4_TYPE = this->CLKout4_TYPE;
        _state->CLKout5_TYPE = this->CLKout5_TYPE;
        _state->CLKout6_TYPE = this->CLKout6_TYPE;
        _state->CLKout7_TYPE = this->CLKout7_TYPE;
        _state->address8 = this->address8;
        _state->CLKout8_9_ADLY = this->CLKout8_9_ADLY;
        _state->Required_8_10 = this->Required_8_10;
        _state->CLKout10_11_ADLY = this->CLKout10_11_ADLY;
        _state->CLKout8_TYPE = this->CLKout8_TYPE;
        _state->CLKout9_TYPE = this->CLKout9_TYPE;
        _state->CLKout10_TYPE = this->CLKout10_TYPE;
        _state->CLKout11_TYPE = this->CLKout11_TYPE;
        _state->address9 = this->address9;
        _state->Required_9_5 = this->Required_9_5;
        _state->Required_9_6 = this->Required_9_6;
        _state->Required_9_7 = this->Required_9_7;
        _state->Required_9_8 = this->Required_9_8;
        _state->Required_9_9 = this->Required_9_9;
        _state->Required_9_10 = this->Required_9_10;
        _state->Required_9_11 = this->Required_9_11;
        _state->Required_9_12 = this->Required_9_12;
        _state->Required_9_13 = this->Required_9_13;
        _state->Required_9_14 = this->Required_9_14;
        _state->Required_9_15 = this->Required_9_15;
        _state->Required_9_16 = this->Required_9_16;
        _state->Required_9_17 = this->Required_9_17;
        _state->Required_9_18 = this->Required_9_18;
        _state->Required_9_19 = this->Required_9_19;
        _state->Required_9_20 = this->Required_9_20;
        _state->Required_9_21 = this->Required_9_21;
        _state->Required_9_22 = this->Required_9_22;
        _state->Required_9_23 = this->Required_9_23;
        _state->Required_9_24 = this->Required_9_24;
        _state->Required_9_25 = this->Required_9_25;
        _state->Required_9_26 = this->Required_9_26;
        _state->Required_9_27 = this->Required_9_27;
        _state->Required_9_28 = this->Required_9_28;
        _state->Required_9_29 = this->Required_9_29;
        _state->Required_9_30 = this->Required_9_30;
        _state->Required_9_31 = this->Required_9_31;
        _state->address10 = this->address10;
        _state->FEEDBACK_MUX = this->FEEDBACK_MUX;
        _state->VCO_DIV = this->VCO_DIV;
        _state->EN_FEEDBACK_MUX = this->EN_FEEDBACK_MUX;
        _state->VCO_MUX = this->VCO_MUX;
        _state->Required_10_13 = this->Required_10_13;
        _state->Required_10_14 = this->Required_10_14;
        _state->Required_10_15 = this->Required_10_15;
        _state->OSCout_DIV = this->OSCout_DIV;
        _state->PD_OSCin = this->PD_OSCin;
        _state->OSCout10_MUX = this->OSCout10_MUX;
        _state->Required_10_21 = this->Required_10_21;
        _state->EN_OSCout0 = this->EN_OSCout0;
        _state->Required_10_23 = this->Required_10_23;
        _state->OSCout0_TYPE = this->OSCout0_TYPE;
        _state->Required_10_28 = this->Required_10_28;
        _state->Required_10_range = this->Required_10_range;
        _state->address11 = this->address11;
        _state->EN_PLL2_XTAL = this->EN_PLL2_XTAL;
        _state->Required_11 = this->Required_11;
        _state->SYNC_TYPE = this->SYNC_TYPE;
        _state->SYNC_EN_AUTO = this->SYNC_EN_AUTO;
        _state->SYNC_POL_INV = this->SYNC_POL_INV;
        _state->SYNC_QUAL = this->SYNC_QUAL;
        _state->SYNC_CLKin2_MUX = this->SYNC_CLKin2_MUX;
        _state->NO_SYNC_CLKout0_1 = this->NO_SYNC_CLKout0_1;
        _state->NO_SYNC_CLKout2_3 = this->NO_SYNC_CLKout2_3;
        _state->NO_SYNC_CLKout4_5 = this->NO_SYNC_CLKout4_5;
        _state->NO_SYNC_CLKout6_7 = this->NO_SYNC_CLKout6_7;
        _state->NO_SYNC_CLKout8_9 = this->NO_SYNC_CLKout8_9;
        _state->NO_SYNC_CLKout10_11 = this->NO_SYNC_CLKout10_11;
        _state->EN_SYNC = this->EN_SYNC;
        _state->MODE = this->MODE;
        _state->address12 = this->address12;
        _state->HOLDOVER_MODE = this->HOLDOVER_MODE;
        _state->EN_TRACK = this->EN_TRACK;
        _state->Required_12_range917 = this->Required_12_range917;
        _state->Required_12_range1819 = this->Required_12_range1819;
        _state->Required_12_20 = this->Required_12_20;
        _state->Required_LE_12 = this->Required_LE_12;
        _state->SYNC_PLL1_DLD = this->SYNC_PLL1_DLD;
        _state->SYNC_PLL2_DLD = this->SYNC_PLL2_DLD;
        _state->LD_TYPE = this->LD_TYPE;
        _state->LD_MUX = this->LD_MUX;
        _state->address13 = this->address13;
        _state->EN_CLKin0 = this->EN_CLKin0;
        _state->EN_CLKin1 = this->EN_CLKin1;
        _state->EN_CLKin2 = this->EN_CLKin2;
        _state->CLKin_Sel_INV = this->CLKin_Sel_INV;
        _state->CLKin_Select_MODE = this->CLKin_Select_MODE;
        _state->Status_CLKin0_MUX = this->Status_CLKin0_MUX;
        _state->DISABLE_DLD1_DET = this->DISABLE_DLD1_DET;
        _state->Status_CLKin0_TYPE = this->Status_CLKin0_TYPE;
        _state->Required_13_19 = this->Required_13_19;
        _state->Status_CLKin1_MUX = this->Status_CLKin1_MUX;
        _state->Required_19_23 = this->Required_19_23;
        _state->HOLDOVER_TYPE = this->HOLDOVER_TYPE;
        _state->HOLDOVER_MUX = this->HOLDOVER_MUX;
        _state->address14 = this->address14;
        _state->EN_VTUNE_RAIL_DET = this->EN_VTUNE_RAIL_DET;
        _state->DAC_LOW_TRIP = this->DAC_LOW_TRIP;
        _state->Required_14_1213 = this->Required_14_1213;
        _state->DAC_HIGH_TRIP = this->DAC_HIGH_TRIP;
        _state->CLKin0_BUF_TYPE = this->CLKin0_BUF_TYPE;
        _state->CLKin1_BUF_TYPE = this->CLKin1_BUF_TYPE;
        _state->CLKin2_BUF_TYPE = this->CLKin2_BUF_TYPE;
        _state->Required_14_23 = this->Required_14_23;
        _state->Status_CLKin1_TYPE = this->Status_CLKin1_TYPE;
        _state->Required_14_27 = this->Required_14_27;
        _state->EN_LOS = this->EN_LOS;
        _state->Required_14_29 = this->Required_14_29;
        _state->LOS_TIMEOUT = this->LOS_TIMEOUT;
        _state->address15 = this->address15;
        _state->FORCE_HOLDOVER = this->FORCE_HOLDOVER;
        _state->HOLDOVER_DLD_CNT = this->HOLDOVER_DLD_CNT;
        _state->EN_MAN_DAC = this->EN_MAN_DAC;
        _state->Required_15 = this->Required_15;
        _state->MAN_DAC = this->MAN_DAC;
        _state->address16 = this->address16;
        _state->Required_16_5 = this->Required_16_5;
        _state->Required_16_6 = this->Required_16_6;
        _state->Required_16_7 = this->Required_16_7;
        _state->Required_16_8 = this->Required_16_8;
        _state->Required_16_9 = this->Required_16_9;
        _state->Required_16_10 = this->Required_16_10;
        _state->Required_16_11 = this->Required_16_11;
        _state->Required_16_12 = this->Required_16_12;
        _state->Required_16_13 = this->Required_16_13;
        _state->Required_16_14 = this->Required_16_14;
        _state->Required_16_15 = this->Required_16_15;
        _state->Required_16_16 = this->Required_16_16;
        _state->Required_16_17 = this->Required_16_17;
        _state->Required_16_18 = this->Required_16_18;
        _state->Required_16_19 = this->Required_16_19;
        _state->Required_16_20 = this->Required_16_20;
        _state->Required_16_21 = this->Required_16_21;
        _state->Required_16_22 = this->Required_16_22;
        _state->Required_16_23 = this->Required_16_23;
        _state->Required_16_24 = this->Required_16_24;
        _state->Required_16_25 = this->Required_16_25;
        _state->Required_16_26 = this->Required_16_26;
        _state->Required_16_27 = this->Required_16_27;
        _state->Required_16_28 = this->Required_16_28;
        _state->Required_16_29 = this->Required_16_29;
        _state->XTAL_LVL = this->XTAL_LVL;
        _state->address24 = this->address24;
        _state->PLL1_WND_SIZE = this->PLL1_WND_SIZE;
        _state->PLL1_R_DLY = this->PLL1_R_DLY;
        _state->Required_24_11 = this->Required_24_11;
        _state->PLL2_N_DLY = this->PLL2_N_DLY;
        _state->Required_24_15 = this->Required_24_15;
        _state->PLL2_R3_LF = this->PLL2_R3_LF;
        _state->Required_24_19 = this->Required_24_19;
        _state->PLL2_R4_LF = this->PLL2_R4_LF;
        _state->Required_24_23 = this->Required_24_23;
        _state->PLL2_C3_LF = this->PLL2_C3_LF;
        _state->PLL2_C4_LF = this->PLL2_C4_LF;
        _state->addres25 = this->addres25;
        _state->PLL2_CP_TRI_25 = this->PLL2_CP_TRI_25;
        _state->PLL1_DLD_CNT_25 = this->PLL1_DLD_CNT_25;
        _state->Required_25 = this->Required_25;
        _state->DAC_CLK_DIV = this->DAC_CLK_DIV;
        _state->address26 = this->address26;
        _state->PLL2_CP_TRI_26 = this->PLL2_CP_TRI_26;
        _state->PLL2_DLD_CNT_26 = this->PLL2_DLD_CNT_26;
        _state->Required_26_20 = this->Required_26_20;
        _state->Required_26_21 = this->Required_26_21;
        _state->Required_26_22 = this->Required_26_22;
        _state->Required_26_23 = this->Required_26_23;
        _state->Required_26_24 = this->Required_26_24;
        _state->Required_26_25 = this->Required_26_25;
        _state->PLL2_CP_GAIN_26 = this->PLL2_CP_GAIN_26;
        _state->PLL2_CP_POL_26 = this->PLL2_CP_POL_26;
        _state->EN_PLL2_REF_2X = this->EN_PLL2_REF_2X;
        _state->PLL2_WND_SIZE = this->PLL2_WND_SIZE;
        _state->address27 = this->address27;
        _state->PLL1_CP_TRI_27 = this->PLL1_CP_TRI_27;
        _state->PLL1_R_27 = this->PLL1_R_27;
        _state->CLKin0_PreR_DIV = this->CLKin0_PreR_DIV;
        _state->CLKin1_PreR_DIV = this->CLKin1_PreR_DIV;
        _state->CLKin2_PreR_DIV = this->CLKin2_PreR_DIV;
        _state->PLL1_CP_GAIN_27 = this->PLL1_CP_GAIN_27;
        _state->PLL1_CP_POL_27 = this->PLL1_CP_POL_27;
        _state->Reqiured_27 = this->Reqiured_27;
        _state->address28 = this->address28;
        _state->Required_28 = this->Required_28;
        _state->PLL1_N_28 = this->PLL1_N_28;
        _state->PLL2_R_28 = this->PLL2_R_28;
        _state->address29 = this->address29;
        _state->PLL2_N_CAL_29 = this->PLL2_N_CAL_29;
        _state->PLL2_FAST_PDF_29 = this->PLL2_FAST_PDF_29;
        _state->OSCin_FREQ_29 = this->OSCin_FREQ_29;
        _state->Required29 = this->Required29;
        _state->address30 = this->address30;
        _state->PLL2_N_30 = this->PLL2_N_30;
        _state->Required_30_522 = this->Required_30_522;
        _state->PLL2_P_30 = this->PLL2_P_30;
        _state->Required_2731 = this->Required_2731;
        _state->address31 = this->address31;
        _state->uWire_LOCK = this->uWire_LOCK;
        _state->Required_615 = this->Required_615;
        _state->READBACK_ADDR = this->READBACK_ADDR;
        _state->READBACK_LE = this->READBACK_LE;
        _state->Required_2231 = this->Required_2231;
    }

    template<typename T> std::set<T> get_changed_addrs(void){
        if (_state == NULL) throw uhd::runtime_error("no saved state");
        //check each register for changes
        std::set<T> addrs;
        if(_state->address0 != this->address0){
            addrs.insert(0);
        }
        if(_state->CLKout0_1_DIV != this->CLKout0_1_DIV){
            addrs.insert(0);
        }
        if(_state->CLKout0_1_HS != this->CLKout0_1_HS){
            addrs.insert(0);
        }
        if(_state->RESET != this->RESET){
            addrs.insert(0);
        }
        if(_state->CLKout0_1_DDLY != this->CLKout0_1_DDLY){
            addrs.insert(0);
        }
        if(_state->CLKout0_ADLY_SEL != this->CLKout0_ADLY_SEL){
            addrs.insert(0);
        }
        if(_state->CLKout1_ADLY_SEL != this->CLKout1_ADLY_SEL){
            addrs.insert(0);
        }
        if(_state->Required_0 != this->Required_0){
            addrs.insert(0);
        }
        if(_state->CLKout0_1_PD != this->CLKout0_1_PD){
            addrs.insert(0);
        }
        if(_state->address1 != this->address1){
            addrs.insert(1);
        }
        if(_state->CLKout2_3_DIV != this->CLKout2_3_DIV){
            addrs.insert(1);
        }
        if(_state->CLKout2_3_HS != this->CLKout2_3_HS){
            addrs.insert(1);
        }
        if(_state->Powerdown != this->Powerdown){
            addrs.insert(1);
        }
        if(_state->CLKout2_3_DDLY != this->CLKout2_3_DDLY){
            addrs.insert(1);
        }
        if(_state->CLKout2_ADLY_SEL != this->CLKout2_ADLY_SEL){
            addrs.insert(1);
        }
        if(_state->CLKout3_ADLY_SEL != this->CLKout3_ADLY_SEL){
            addrs.insert(1);
        }
        if(_state->Required_1 != this->Required_1){
            addrs.insert(1);
        }
        if(_state->CLKout2_3_PD != this->CLKout2_3_PD){
            addrs.insert(1);
        }
        if(_state->address2 != this->address2){
            addrs.insert(2);
        }
        if(_state->CLKout4_5_DIV != this->CLKout4_5_DIV){
            addrs.insert(2);
        }
        if(_state->CLKout4_5_HS != this->CLKout4_5_HS){
            addrs.insert(2);
        }
        if(_state->Required_2_17 != this->Required_2_17){
            addrs.insert(2);
        }
        if(_state->CLKout4_5_DDLY != this->CLKout4_5_DDLY){
            addrs.insert(2);
        }
        if(_state->CLKout4_ADLY_SEL != this->CLKout4_ADLY_SEL){
            addrs.insert(2);
        }
        if(_state->CLKout5_ADLY_SEL != this->CLKout5_ADLY_SEL){
            addrs.insert(2);
        }
        if(_state->Required_2_30 != this->Required_2_30){
            addrs.insert(2);
        }
        if(_state->CLKout4_5_PD != this->CLKout4_5_PD){
            addrs.insert(2);
        }
        if(_state->address3 != this->address3){
            addrs.insert(3);
        }
        if(_state->CLKout6_7_DIV != this->CLKout6_7_DIV){
            addrs.insert(3);
        }
        if(_state->CLKout6_7_HS != this->CLKout6_7_HS){
            addrs.insert(3);
        }
        if(_state->Required_3_17 != this->Required_3_17){
            addrs.insert(3);
        }
        if(_state->CLKout6_7_DDLY != this->CLKout6_7_DDLY){
            addrs.insert(3);
        }
        if(_state->CLKout6_ADLY_SEL != this->CLKout6_ADLY_SEL){
            addrs.insert(3);
        }
        if(_state->CLKout7_ADLY_SEL != this->CLKout7_ADLY_SEL){
            addrs.insert(3);
        }
        if(_state->CLKout6_7_OSCin_Sel != this->CLKout6_7_OSCin_Sel){
            addrs.insert(3);
        }
        if(_state->CLKout6_7_PD != this->CLKout6_7_PD){
            addrs.insert(3);
        }
        if(_state->address4 != this->address4){
            addrs.insert(4);
        }
        if(_state->CLKout8_9_DIV != this->CLKout8_9_DIV){
            addrs.insert(4);
        }
        if(_state->CLKout8_9_HS != this->CLKout8_9_HS){
            addrs.insert(4);
        }
        if(_state->Required_4_17 != this->Required_4_17){
            addrs.insert(4);
        }
        if(_state->CLKout8_9_DDLY != this->CLKout8_9_DDLY){
            addrs.insert(4);
        }
        if(_state->CLKout8_ADLY_SEL != this->CLKout8_ADLY_SEL){
            addrs.insert(4);
        }
        if(_state->CLKout9_ADLY_SEL != this->CLKout9_ADLY_SEL){
            addrs.insert(4);
        }
        if(_state->CLKout8_9_OSCin_Sel != this->CLKout8_9_OSCin_Sel){
            addrs.insert(4);
        }
        if(_state->CLKout8_9_PD != this->CLKout8_9_PD){
            addrs.insert(4);
        }
        if(_state->address5 != this->address5){
            addrs.insert(5);
        }
        if(_state->CLKout10_11_DIV != this->CLKout10_11_DIV){
            addrs.insert(5);
        }
        if(_state->CLKout10_11_HS != this->CLKout10_11_HS){
            addrs.insert(5);
        }
        if(_state->Required_5_17 != this->Required_5_17){
            addrs.insert(5);
        }
        if(_state->CLKout10_11_DDLY != this->CLKout10_11_DDLY){
            addrs.insert(5);
        }
        if(_state->CLKout10_ADLY_SEL != this->CLKout10_ADLY_SEL){
            addrs.insert(5);
        }
        if(_state->CLKout11_ADLY_SEL != this->CLKout11_ADLY_SEL){
            addrs.insert(5);
        }
        if(_state->Required_5_30 != this->Required_5_30){
            addrs.insert(5);
        }
        if(_state->CLKout10_11_PD != this->CLKout10_11_PD){
            addrs.insert(5);
        }
        if(_state->address6 != this->address6){
            addrs.insert(6);
        }
        if(_state->CLKout0_1_ADLY != this->CLKout0_1_ADLY){
            addrs.insert(6);
        }
        if(_state->Required_6_10 != this->Required_6_10){
            addrs.insert(6);
        }
        if(_state->CLKout2_3_ADLY != this->CLKout2_3_ADLY){
            addrs.insert(6);
        }
        if(_state->CLKout0_TYPE != this->CLKout0_TYPE){
            addrs.insert(6);
        }
        if(_state->CLKout1_TYPE != this->CLKout1_TYPE){
            addrs.insert(6);
        }
        if(_state->CLKout2_TYPE != this->CLKout2_TYPE){
            addrs.insert(6);
        }
        if(_state->CLKout3_TYPE != this->CLKout3_TYPE){
            addrs.insert(6);
        }
        if(_state->address7 != this->address7){
            addrs.insert(7);
        }
        if(_state->CLKout4_5_ADLY != this->CLKout4_5_ADLY){
            addrs.insert(7);
        }
        if(_state->Required_7_10 != this->Required_7_10){
            addrs.insert(7);
        }
        if(_state->CLKout6_7_ADLY != this->CLKout6_7_ADLY){
            addrs.insert(7);
        }
        if(_state->CLKout4_TYPE != this->CLKout4_TYPE){
            addrs.insert(7);
        }
        if(_state->CLKout5_TYPE != this->CLKout5_TYPE){
            addrs.insert(7);
        }
        if(_state->CLKout6_TYPE != this->CLKout6_TYPE){
            addrs.insert(7);
        }
        if(_state->CLKout7_TYPE != this->CLKout7_TYPE){
            addrs.insert(7);
        }
        if(_state->address8 != this->address8){
            addrs.insert(8);
        }
        if(_state->CLKout8_9_ADLY != this->CLKout8_9_ADLY){
            addrs.insert(8);
        }
        if(_state->Required_8_10 != this->Required_8_10){
            addrs.insert(8);
        }
        if(_state->CLKout10_11_ADLY != this->CLKout10_11_ADLY){
            addrs.insert(8);
        }
        if(_state->CLKout8_TYPE != this->CLKout8_TYPE){
            addrs.insert(8);
        }
        if(_state->CLKout9_TYPE != this->CLKout9_TYPE){
            addrs.insert(8);
        }
        if(_state->CLKout10_TYPE != this->CLKout10_TYPE){
            addrs.insert(8);
        }
        if(_state->CLKout11_TYPE != this->CLKout11_TYPE){
            addrs.insert(8);
        }
        if(_state->address9 != this->address9){
            addrs.insert(9);
        }
        if(_state->Required_9_5 != this->Required_9_5){
            addrs.insert(9);
        }
        if(_state->Required_9_6 != this->Required_9_6){
            addrs.insert(9);
        }
        if(_state->Required_9_7 != this->Required_9_7){
            addrs.insert(9);
        }
        if(_state->Required_9_8 != this->Required_9_8){
            addrs.insert(9);
        }
        if(_state->Required_9_9 != this->Required_9_9){
            addrs.insert(9);
        }
        if(_state->Required_9_10 != this->Required_9_10){
            addrs.insert(9);
        }
        if(_state->Required_9_11 != this->Required_9_11){
            addrs.insert(9);
        }
        if(_state->Required_9_12 != this->Required_9_12){
            addrs.insert(9);
        }
        if(_state->Required_9_13 != this->Required_9_13){
            addrs.insert(9);
        }
        if(_state->Required_9_14 != this->Required_9_14){
            addrs.insert(9);
        }
        if(_state->Required_9_15 != this->Required_9_15){
            addrs.insert(9);
        }
        if(_state->Required_9_16 != this->Required_9_16){
            addrs.insert(9);
        }
        if(_state->Required_9_17 != this->Required_9_17){
            addrs.insert(9);
        }
        if(_state->Required_9_18 != this->Required_9_18){
            addrs.insert(9);
        }
        if(_state->Required_9_19 != this->Required_9_19){
            addrs.insert(9);
        }
        if(_state->Required_9_20 != this->Required_9_20){
            addrs.insert(9);
        }
        if(_state->Required_9_21 != this->Required_9_21){
            addrs.insert(9);
        }
        if(_state->Required_9_22 != this->Required_9_22){
            addrs.insert(9);
        }
        if(_state->Required_9_23 != this->Required_9_23){
            addrs.insert(9);
        }
        if(_state->Required_9_24 != this->Required_9_24){
            addrs.insert(9);
        }
        if(_state->Required_9_25 != this->Required_9_25){
            addrs.insert(9);
        }
        if(_state->Required_9_26 != this->Required_9_26){
            addrs.insert(9);
        }
        if(_state->Required_9_27 != this->Required_9_27){
            addrs.insert(9);
        }
        if(_state->Required_9_28 != this->Required_9_28){
            addrs.insert(9);
        }
        if(_state->Required_9_29 != this->Required_9_29){
            addrs.insert(9);
        }
        if(_state->Required_9_30 != this->Required_9_30){
            addrs.insert(9);
        }
        if(_state->Required_9_31 != this->Required_9_31){
            addrs.insert(9);
        }
        if(_state->address10 != this->address10){
            addrs.insert(10);
        }
        if(_state->FEEDBACK_MUX != this->FEEDBACK_MUX){
            addrs.insert(10);
        }
        if(_state->VCO_DIV != this->VCO_DIV){
            addrs.insert(10);
        }
        if(_state->EN_FEEDBACK_MUX != this->EN_FEEDBACK_MUX){
            addrs.insert(10);
        }
        if(_state->VCO_MUX != this->VCO_MUX){
            addrs.insert(10);
        }
        if(_state->Required_10_13 != this->Required_10_13){
            addrs.insert(10);
        }
        if(_state->Required_10_14 != this->Required_10_14){
            addrs.insert(10);
        }
        if(_state->Required_10_15 != this->Required_10_15){
            addrs.insert(10);
        }
        if(_state->OSCout_DIV != this->OSCout_DIV){
            addrs.insert(10);
        }
        if(_state->PD_OSCin != this->PD_OSCin){
            addrs.insert(10);
        }
        if(_state->OSCout10_MUX != this->OSCout10_MUX){
            addrs.insert(10);
        }
        if(_state->Required_10_21 != this->Required_10_21){
            addrs.insert(10);
        }
        if(_state->EN_OSCout0 != this->EN_OSCout0){
            addrs.insert(10);
        }
        if(_state->Required_10_23 != this->Required_10_23){
            addrs.insert(10);
        }
        if(_state->OSCout0_TYPE != this->OSCout0_TYPE){
            addrs.insert(10);
        }
        if(_state->Required_10_28 != this->Required_10_28){
            addrs.insert(10);
        }
        if(_state->Required_10_range != this->Required_10_range){
            addrs.insert(10);
        }
        if(_state->address11 != this->address11){
            addrs.insert(11);
        }
        if(_state->EN_PLL2_XTAL != this->EN_PLL2_XTAL){
            addrs.insert(11);
        }
        if(_state->Required_11 != this->Required_11){
            addrs.insert(11);
        }
        if(_state->SYNC_TYPE != this->SYNC_TYPE){
            addrs.insert(11);
        }
        if(_state->SYNC_EN_AUTO != this->SYNC_EN_AUTO){
            addrs.insert(11);
        }
        if(_state->SYNC_POL_INV != this->SYNC_POL_INV){
            addrs.insert(11);
        }
        if(_state->SYNC_QUAL != this->SYNC_QUAL){
            addrs.insert(11);
        }
        if(_state->SYNC_CLKin2_MUX != this->SYNC_CLKin2_MUX){
            addrs.insert(11);
        }
        if(_state->NO_SYNC_CLKout0_1 != this->NO_SYNC_CLKout0_1){
            addrs.insert(11);
        }
        if(_state->NO_SYNC_CLKout2_3 != this->NO_SYNC_CLKout2_3){
            addrs.insert(11);
        }
        if(_state->NO_SYNC_CLKout4_5 != this->NO_SYNC_CLKout4_5){
            addrs.insert(11);
        }
        if(_state->NO_SYNC_CLKout6_7 != this->NO_SYNC_CLKout6_7){
            addrs.insert(11);
        }
        if(_state->NO_SYNC_CLKout8_9 != this->NO_SYNC_CLKout8_9){
            addrs.insert(11);
        }
        if(_state->NO_SYNC_CLKout10_11 != this->NO_SYNC_CLKout10_11){
            addrs.insert(11);
        }
        if(_state->EN_SYNC != this->EN_SYNC){
            addrs.insert(11);
        }
        if(_state->MODE != this->MODE){
            addrs.insert(11);
        }
        if(_state->address12 != this->address12){
            addrs.insert(12);
        }
        if(_state->HOLDOVER_MODE != this->HOLDOVER_MODE){
            addrs.insert(12);
        }
        if(_state->EN_TRACK != this->EN_TRACK){
            addrs.insert(12);
        }
        if(_state->Required_12_range917 != this->Required_12_range917){
            addrs.insert(12);
        }
        if(_state->Required_12_range1819 != this->Required_12_range1819){
            addrs.insert(12);
        }
        if(_state->Required_12_20 != this->Required_12_20){
            addrs.insert(12);
        }
        if(_state->Required_LE_12 != this->Required_LE_12){
            addrs.insert(12);
        }
        if(_state->SYNC_PLL1_DLD != this->SYNC_PLL1_DLD){
            addrs.insert(12);
        }
        if(_state->SYNC_PLL2_DLD != this->SYNC_PLL2_DLD){
            addrs.insert(12);
        }
        if(_state->LD_TYPE != this->LD_TYPE){
            addrs.insert(12);
        }
        if(_state->LD_MUX != this->LD_MUX){
            addrs.insert(12);
        }
        if(_state->address13 != this->address13){
            addrs.insert(13);
        }
        if(_state->EN_CLKin0 != this->EN_CLKin0){
            addrs.insert(13);
        }
        if(_state->EN_CLKin1 != this->EN_CLKin1){
            addrs.insert(13);
        }
        if(_state->EN_CLKin2 != this->EN_CLKin2){
            addrs.insert(13);
        }
        if(_state->CLKin_Sel_INV != this->CLKin_Sel_INV){
            addrs.insert(13);
        }
        if(_state->CLKin_Select_MODE != this->CLKin_Select_MODE){
            addrs.insert(13);
        }
        if(_state->Status_CLKin0_MUX != this->Status_CLKin0_MUX){
            addrs.insert(13);
        }
        if(_state->DISABLE_DLD1_DET != this->DISABLE_DLD1_DET){
            addrs.insert(13);
        }
        if(_state->Status_CLKin0_TYPE != this->Status_CLKin0_TYPE){
            addrs.insert(13);
        }
        if(_state->Required_13_19 != this->Required_13_19){
            addrs.insert(13);
        }
        if(_state->Status_CLKin1_MUX != this->Status_CLKin1_MUX){
            addrs.insert(13);
        }
        if(_state->Required_19_23 != this->Required_19_23){
            addrs.insert(13);
        }
        if(_state->HOLDOVER_TYPE != this->HOLDOVER_TYPE){
            addrs.insert(13);
        }
        if(_state->HOLDOVER_MUX != this->HOLDOVER_MUX){
            addrs.insert(13);
        }
        if(_state->address14 != this->address14){
            addrs.insert(14);
        }
        if(_state->EN_VTUNE_RAIL_DET != this->EN_VTUNE_RAIL_DET){
            addrs.insert(14);
        }
        if(_state->DAC_LOW_TRIP != this->DAC_LOW_TRIP){
            addrs.insert(14);
        }
        if(_state->Required_14_1213 != this->Required_14_1213){
            addrs.insert(14);
        }
        if(_state->DAC_HIGH_TRIP != this->DAC_HIGH_TRIP){
            addrs.insert(14);
        }
        if(_state->CLKin0_BUF_TYPE != this->CLKin0_BUF_TYPE){
            addrs.insert(14);
        }
        if(_state->CLKin1_BUF_TYPE != this->CLKin1_BUF_TYPE){
            addrs.insert(14);
        }
        if(_state->CLKin2_BUF_TYPE != this->CLKin2_BUF_TYPE){
            addrs.insert(14);
        }
        if(_state->Required_14_23 != this->Required_14_23){
            addrs.insert(14);
        }
        if(_state->Status_CLKin1_TYPE != this->Status_CLKin1_TYPE){
            addrs.insert(14);
        }
        if(_state->Required_14_27 != this->Required_14_27){
            addrs.insert(14);
        }
        if(_state->EN_LOS != this->EN_LOS){
            addrs.insert(14);
        }
        if(_state->Required_14_29 != this->Required_14_29){
            addrs.insert(14);
        }
        if(_state->LOS_TIMEOUT != this->LOS_TIMEOUT){
            addrs.insert(14);
        }
        if(_state->address15 != this->address15){
            addrs.insert(15);
        }
        if(_state->FORCE_HOLDOVER != this->FORCE_HOLDOVER){
            addrs.insert(15);
        }
        if(_state->HOLDOVER_DLD_CNT != this->HOLDOVER_DLD_CNT){
            addrs.insert(15);
        }
        if(_state->EN_MAN_DAC != this->EN_MAN_DAC){
            addrs.insert(15);
        }
        if(_state->Required_15 != this->Required_15){
            addrs.insert(15);
        }
        if(_state->MAN_DAC != this->MAN_DAC){
            addrs.insert(15);
        }
        if(_state->address16 != this->address16){
            addrs.insert(16);
        }
        if(_state->Required_16_5 != this->Required_16_5){
            addrs.insert(16);
        }
        if(_state->Required_16_6 != this->Required_16_6){
            addrs.insert(16);
        }
        if(_state->Required_16_7 != this->Required_16_7){
            addrs.insert(16);
        }
        if(_state->Required_16_8 != this->Required_16_8){
            addrs.insert(16);
        }
        if(_state->Required_16_9 != this->Required_16_9){
            addrs.insert(16);
        }
        if(_state->Required_16_10 != this->Required_16_10){
            addrs.insert(16);
        }
        if(_state->Required_16_11 != this->Required_16_11){
            addrs.insert(16);
        }
        if(_state->Required_16_12 != this->Required_16_12){
            addrs.insert(16);
        }
        if(_state->Required_16_13 != this->Required_16_13){
            addrs.insert(16);
        }
        if(_state->Required_16_14 != this->Required_16_14){
            addrs.insert(16);
        }
        if(_state->Required_16_15 != this->Required_16_15){
            addrs.insert(16);
        }
        if(_state->Required_16_16 != this->Required_16_16){
            addrs.insert(16);
        }
        if(_state->Required_16_17 != this->Required_16_17){
            addrs.insert(16);
        }
        if(_state->Required_16_18 != this->Required_16_18){
            addrs.insert(16);
        }
        if(_state->Required_16_19 != this->Required_16_19){
            addrs.insert(16);
        }
        if(_state->Required_16_20 != this->Required_16_20){
            addrs.insert(16);
        }
        if(_state->Required_16_21 != this->Required_16_21){
            addrs.insert(16);
        }
        if(_state->Required_16_22 != this->Required_16_22){
            addrs.insert(16);
        }
        if(_state->Required_16_23 != this->Required_16_23){
            addrs.insert(16);
        }
        if(_state->Required_16_24 != this->Required_16_24){
            addrs.insert(16);
        }
        if(_state->Required_16_25 != this->Required_16_25){
            addrs.insert(16);
        }
        if(_state->Required_16_26 != this->Required_16_26){
            addrs.insert(16);
        }
        if(_state->Required_16_27 != this->Required_16_27){
            addrs.insert(16);
        }
        if(_state->Required_16_28 != this->Required_16_28){
            addrs.insert(16);
        }
        if(_state->Required_16_29 != this->Required_16_29){
            addrs.insert(16);
        }
        if(_state->XTAL_LVL != this->XTAL_LVL){
            addrs.insert(16);
        }
        if(_state->address24 != this->address24){
            addrs.insert(24);
        }
        if(_state->PLL1_WND_SIZE != this->PLL1_WND_SIZE){
            addrs.insert(24);
        }
        if(_state->PLL1_R_DLY != this->PLL1_R_DLY){
            addrs.insert(24);
        }
        if(_state->Required_24_11 != this->Required_24_11){
            addrs.insert(24);
        }
        if(_state->PLL2_N_DLY != this->PLL2_N_DLY){
            addrs.insert(24);
        }
        if(_state->Required_24_15 != this->Required_24_15){
            addrs.insert(24);
        }
        if(_state->PLL2_R3_LF != this->PLL2_R3_LF){
            addrs.insert(24);
        }
        if(_state->Required_24_19 != this->Required_24_19){
            addrs.insert(24);
        }
        if(_state->PLL2_R4_LF != this->PLL2_R4_LF){
            addrs.insert(24);
        }
        if(_state->Required_24_23 != this->Required_24_23){
            addrs.insert(24);
        }
        if(_state->PLL2_C3_LF != this->PLL2_C3_LF){
            addrs.insert(24);
        }
        if(_state->PLL2_C4_LF != this->PLL2_C4_LF){
            addrs.insert(24);
        }
        if(_state->addres25 != this->addres25){
            addrs.insert(25);
        }
        if(_state->PLL2_CP_TRI_25 != this->PLL2_CP_TRI_25){
            addrs.insert(25);
        }
        if(_state->PLL1_DLD_CNT_25 != this->PLL1_DLD_CNT_25){
            addrs.insert(25);
        }
        if(_state->Required_25 != this->Required_25){
            addrs.insert(25);
        }
        if(_state->DAC_CLK_DIV != this->DAC_CLK_DIV){
            addrs.insert(25);
        }
        if(_state->address26 != this->address26){
            addrs.insert(26);
        }
        if(_state->PLL2_CP_TRI_26 != this->PLL2_CP_TRI_26){
            addrs.insert(26);
        }
        if(_state->PLL2_DLD_CNT_26 != this->PLL2_DLD_CNT_26){
            addrs.insert(26);
        }
        if(_state->Required_26_20 != this->Required_26_20){
            addrs.insert(26);
        }
        if(_state->Required_26_21 != this->Required_26_21){
            addrs.insert(26);
        }
        if(_state->Required_26_22 != this->Required_26_22){
            addrs.insert(26);
        }
        if(_state->Required_26_23 != this->Required_26_23){
            addrs.insert(26);
        }
        if(_state->Required_26_24 != this->Required_26_24){
            addrs.insert(26);
        }
        if(_state->Required_26_25 != this->Required_26_25){
            addrs.insert(26);
        }
        if(_state->PLL2_CP_GAIN_26 != this->PLL2_CP_GAIN_26){
            addrs.insert(26);
        }
        if(_state->PLL2_CP_POL_26 != this->PLL2_CP_POL_26){
            addrs.insert(26);
        }
        if(_state->EN_PLL2_REF_2X != this->EN_PLL2_REF_2X){
            addrs.insert(26);
        }
        if(_state->PLL2_WND_SIZE != this->PLL2_WND_SIZE){
            addrs.insert(26);
        }
        if(_state->address27 != this->address27){
            addrs.insert(27);
        }
        if(_state->PLL1_CP_TRI_27 != this->PLL1_CP_TRI_27){
            addrs.insert(27);
        }
        if(_state->PLL1_R_27 != this->PLL1_R_27){
            addrs.insert(27);
        }
        if(_state->CLKin0_PreR_DIV != this->CLKin0_PreR_DIV){
            addrs.insert(27);
        }
        if(_state->CLKin1_PreR_DIV != this->CLKin1_PreR_DIV){
            addrs.insert(27);
        }
        if(_state->CLKin2_PreR_DIV != this->CLKin2_PreR_DIV){
            addrs.insert(27);
        }
        if(_state->PLL1_CP_GAIN_27 != this->PLL1_CP_GAIN_27){
            addrs.insert(27);
        }
        if(_state->PLL1_CP_POL_27 != this->PLL1_CP_POL_27){
            addrs.insert(27);
        }
        if(_state->Reqiured_27 != this->Reqiured_27){
            addrs.insert(27);
        }
        if(_state->address28 != this->address28){
            addrs.insert(28);
        }
        if(_state->Required_28 != this->Required_28){
            addrs.insert(28);
        }
        if(_state->PLL1_N_28 != this->PLL1_N_28){
            addrs.insert(28);
        }
        if(_state->PLL2_R_28 != this->PLL2_R_28){
            addrs.insert(28);
        }
        if(_state->address29 != this->address29){
            addrs.insert(29);
        }
        if(_state->PLL2_N_CAL_29 != this->PLL2_N_CAL_29){
            addrs.insert(29);
        }
        if(_state->PLL2_FAST_PDF_29 != this->PLL2_FAST_PDF_29){
            addrs.insert(29);
        }
        if(_state->OSCin_FREQ_29 != this->OSCin_FREQ_29){
            addrs.insert(29);
        }
        if(_state->Required29 != this->Required29){
            addrs.insert(29);
        }
        if(_state->address30 != this->address30){
            addrs.insert(30);
        }
        if(_state->PLL2_N_30 != this->PLL2_N_30){
            addrs.insert(30);
        }
        if(_state->Required_30_522 != this->Required_30_522){
            addrs.insert(30);
        }
        if(_state->PLL2_P_30 != this->PLL2_P_30){
            addrs.insert(30);
        }
        if(_state->Required_2731 != this->Required_2731){
            addrs.insert(30);
        }
        if(_state->address31 != this->address31){
            addrs.insert(31);
        }
        if(_state->uWire_LOCK != this->uWire_LOCK){
            addrs.insert(31);
        }
        if(_state->Required_615 != this->Required_615){
            addrs.insert(31);
        }
        if(_state->READBACK_ADDR != this->READBACK_ADDR){
            addrs.insert(31);
        }
        if(_state->READBACK_LE != this->READBACK_LE){
            addrs.insert(31);
        }
        if(_state->Required_2231 != this->Required_2231){
            addrs.insert(31);
        }
        return addrs;
    }

private:
    lmk04816_regs_t *_state;
};

#endif /* INCLUDED_LMK04816_REGS_HPP */
